# Test become_user and become_user_password
- set_fact:
    becomeuser: 'ansibleA'
    becomepwd: 'password'
    nopwd_user: 'ansibleB'
    libname: 'becomelib'
  no_log: true

- block:
    - name: search the module log to ensure password is not logged.
      shell: 'cat /var/log/ibmi_ansible_modules.log | grep "ibmi"  | wc -l'
      register: check_pwd_count

    - name: assert the count (and handle case where module log does not exist)
      assert:
        that:
         - (check_pwd_count.stdout | int > 0) or ("'cannot open' in check_pwd_count.stderr")

    - name: cleanup module.log
      file:
        path: /var/log/ibmi_ansible_modules.log
        state: absent
      ignore_errors: true

    ### Setup the user profiles and authority list
    - name: create a user profile with required options
      ibmi_user_and_group:
        operation: 'create'
        user: '{{becomeuser}}'
        password: '{{becomepwd}}'

    - name: display a user profile with required options
      ibmi_user_and_group:
        operation: 'display'
        user: '{{becomeuser}}'
      register: user_result

    - include: iasp.yml
    - include: QSQSRVR.yml

    ## Verify module functions when provides become_user and become_user_password
    - name: TC01 create a library with become_user and become_user_password
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}1'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'

    - name: TC01 verify the object is owned by the become user
      ibmi_object_authority:
        operation: 'display'
        object_name: '{{libname}}1'
        #object_library: 'TEMPLIB'
        object_type: '*LIB'
      register: authority_result

    - name: TC01 assert the returned options of display
      assert:
        that:
          - authority_result.object_authority_list[0].OWNER == '{{becomeuser.upper()}}'

    - name: TC02 create a library with a not existing user profile
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}3'
        become_user: 'abc'
      register: neg_result
      failed_when: neg_result.failed != true

    - name: TC03 create a library with wrong password
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}4'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: 'abcdeft'
      register: neg_result
      failed_when: neg_result.failed != true

    - name: TC05 create a library without become_user
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}4'
        #become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: neg_result

    - name: TC05 verify the object is owned by the ansible_ssh_user
      ibmi_object_authority:
        operation: 'display'
        object_name: '{{libname}}4'
        #object_library: 'TEMPLIB'
        object_type: '*LIB'
      register: authority_result

    - name: TC05 assert the returned options of display
      assert:
        that:
          - authority_result.object_authority_list[0].OWNER == '{{ansible_ssh_user.upper()}}'

    - name: cleanup environment
      ibmi_cl_command:
        cmd: dltlib lib(ansible1)
        joblog: true
      ignore_errors: true

    - name: TC06 run CL command module with joblog = False
      ibmi_cl_command:
        cmd: crtlib lib(ansible1)
        joblog: false
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: crtlib_result

    - name: TC06 assert the returned parameters when joblog
      assert:
        that:
          - "'CPF2110' not in crtlib_result"
          - crtlib_result.joblog == False
          - crtlib_result.cmd != ""
          - crtlib_result.stderr == ""
          - crtlib_result.stderr_lines == []
          - crtlib_result.rc == 0

    - name: TC07 run CL command module without joblog
      ibmi_cl_command:
        cmd: DSPLIB ansible1
        joblog: true
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: dsplib_result_1

    - name: TC07 assert returned parameters without joblog
      assert:
        that:
          - dsplib_result_1.joblog == true
          - dsplib_result_1.cmd == "DSPLIB ansible1"
          - dsplib_result_1.stderr == ""
          - dsplib_result_1.stderr_lines == []
          - dsplib_result_1.rc == 0
          - dsplib_result_1.job_log == []

    - name: TC08 run CL command module with joblog = true
      ibmi_cl_command:
        cmd: dltlib lib(ansible1)
        joblog: true
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: dltlib_result_1

    - name: TC08 assert returned parameters with joblog = true
      assert:
        that:
          - dltlib_result_1.joblog == true
          - dltlib_result_1.cmd == "dltlib lib(ansible1)"
          - dltlib_result_1.stderr == ""
          - dltlib_result_1.stderr_lines == []
          - dltlib_result_1.rc == 0
          - dltlib_result_1.job_log != []

    - name: TC09 run CL command module to delete an not existing library
      ibmi_cl_command:
        cmd: dltlib lib(ansible1)
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
        joblog: true
      register: dltlib_result_2
      ignore_errors: true

    - name: TC09 assert returned parameters with joblog = True
      assert:
        that:
          - dltlib_result_2.job_log != []
          - dltlib_result_2.stderr != ""
          - (dltlib_result_2.job_log | selectattr('MESSAGE_ID', 'equalto', 'CPF2110') | map(attribute='MESSAGE_ID') | list | length) >= 1
          - dltlib_result_2.rc != 0

    ## Create a *USRCLS user as the ansible_ssh_user
    - name: create a user profile with required options
      ibmi_user_and_group:
        operation: 'create'
        user: '{{nopwd_user}}'
        password: '{{becomepwd}}'

    - set_fact:
        ansible_ssh_user_org: '{{ansible_ssh_user}}'
        ansible_ssh_pass_org: '{{ansible_ssh_pass}}'
      no_log: true

    - set_fact:
        ansible_ssh_user: '{{nopwd_user}}'
        ansible_ssh_pass: '{{becomepwd}}'
      no_log: true

    - include: QSQSRVR_abnormal.yml

    - name: TC04 create a library without a password, check default value of become_user_password is *NOPWD
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}4'
        become_user: '{{becomeuser.upper()}}'
      register: neg_result
      failed_when: neg_result.failed != true

    - name: TC11 create a library with become_user_password=*NOPWDCHK
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}6'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWDCHK'
      register: nopwdchk_result
      failed_when: nopwdchk_result.failed != true

    - name: TC12 create a library with become_user_password=*NOPWDSTS
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}6'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWDSTS'
      register: nopwdsts_result
      failed_when: nopwdsts_result.failed != true

    ## Grant *USE of becomeuser to the ssh_user, then test special values *NOPWD *NOPWDCHK *NOPWDSTS
    - name: Grant *USE of becomeuser to the ssh_user
      ibmi_object_authority:
        operation: 'grant'
        object_name: '{{becomeuser}}'
        object_library: 'QSYS'
        object_type: '*USRPRF'
        user: "{{ansible_ssh_user}}"
        authority:
          - "*USE"
        become_user: '{{ansible_ssh_user_org}}'
        become_user_password: '{{ansible_ssh_pass_org}}'
      register: authority_result

    - name: TC12 create a library with become_user_password=*NOPWD
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}7'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWD'

    - name: TC12B create a library without a password, check default value of become_user_password is *NOPWD
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}4'
        become_user: '{{becomeuser.upper()}}'
        #become_user_password: 'abcdeft'
      register: neg_result
      failed_when: neg_result.failed != true

    - name: TC12 verify the object is owned by the become user
      ibmi_object_authority:
        operation: 'display'
        object_name: '{{libname}}7'
        object_type: '*LIB'
        become_user: '{{ansible_ssh_user_org}}'
        become_user_password: '{{ansible_ssh_pass_org}}'
      register: authority_result

    - name: TC12 assert the returned options of display
      assert:
        that:
          - authority_result.object_authority_list[0].OWNER == '{{becomeuser.upper()}}'

    - name: TC13 create a library with become_user_password=*NOPWDCHK
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}8'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWDCHK'

    - name: TC13 verify the object is owned by the become user
      ibmi_object_authority:
        operation: 'display'
        object_name: '{{libname}}8'
        object_type: '*LIB'
        become_user: '{{ansible_ssh_user_org}}'
        become_user_password: '{{ansible_ssh_pass_org}}'
      register: authority_result

    - name: TC13 assert the returned options of display
      assert:
        that:
          - authority_result.object_authority_list[0].OWNER == '{{becomeuser.upper()}}'

    - name: TC14 create a library with become_user_password=*NOPWDSTS
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}9'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWDSTS'

    - name: TC14 verify the object is owned by the become user
      ibmi_object_authority:
        operation: 'display'
        object_name: '{{libname}}9'
        object_type: '*LIB'
        become_user: '{{ansible_ssh_user_org}}'
        become_user_password: '{{ansible_ssh_pass_org}}'
      register: authority_result

    - name: TC14 assert the returned options of display
      assert:
        that:
          - authority_result.object_authority_list[0].OWNER == '{{becomeuser.upper()}}'

    ## Disable becomeuser, then test special values *NOPWD *NOPWDCHK *NOPWDSTS
    - name: Disable becomeuser
      ibmi_user_and_group:
        operation: 'change'
        user: '{{becomeuser}}'
        # password: '{{pwd}}'
        # expire: '*NO'
        status: '*DISABLED'
        # user_class: '*SECOFR'
        # special_authority: ['*ALLOBJ', '*IOSYSCFG', '*SECADM', '*SERVICE', '*SPLCTL']
        # user_group: '{{new_group[1]}}'
        # owner: '*USRPRF'
        # text: 'ANSIBLE TESTING'
        # parameters: "HOMEDIR('/home/{{new_user[0]}}')"
        become_user: '{{ansible_ssh_user_org}}'
        become_user_password: '{{ansible_ssh_pass_org}}'
      register: user_result

    - name: Grant ssh_user '*ALLOBJ', '*SECADM'
      ibmi_user_and_group:
        operation: 'change'
        user: '{{ansible_ssh_user}}'
        # password: '{{pwd}}'
        # expire: '*NO'
        status: '*ENABLED'
        # user_class: '*SECOFR'
        special_authority: ['*ALLOBJ', '*SECADM']
        # user_group: '{{new_group[1]}}'
        # owner: '*USRPRF'
        # text: 'ANSIBLE TESTING'
        # parameters: "HOMEDIR('/home/{{new_user[0]}}')"
        become_user: '{{ansible_ssh_user_org}}'
        become_user_password: '{{ansible_ssh_pass_org}}'
      register: user_result

    - name: TC15 create a library with become_user_password=*NOPWD
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}A'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWD'
      register: nopwd_result
      failed_when: nopwd_result.failed != true

    - name: TC16 create a library with become_user_password=*NOPWDCHK
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}A'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWDCHK'
      register: nopwdchk_result

    - name: TC17 create a library with become_user_password=*NOPWDSTS
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}A'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWDSTS'
      register: nopwdsts_result
      failed_when: nopwdsts_result.failed != true

    ## Enable becomeuser but set its password to Expired, then test special values *NOPWD *NOPWDCHK *NOPWDSTS
    - name: Disable becomeuser
      ibmi_user_and_group:
        operation: 'change'
        user: '{{becomeuser}}'
        # password: '{{pwd}}'
        expire: '*YES'
        status: '*ENABLED'
        # user_class: '*SECOFR'
        # special_authority: ['*ALLOBJ', '*IOSYSCFG', '*SECADM', '*SERVICE', '*SPLCTL']
        # user_group: '{{new_group[1]}}'
        # owner: '*USRPRF'
        # text: 'ANSIBLE TESTING'
        # parameters: "HOMEDIR('/home/{{new_user[0]}}')"
        become_user: '{{ansible_ssh_user_org}}'
        become_user_password: '{{ansible_ssh_pass_org}}'
      register: user_result

    - name: TC18 create a library with become_user_password=*NOPWD
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}A'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWD'
      register: nopwd_result
      failed_when: nopwd_result.failed != true

    - name: TC19 create a library with become_user_password=*NOPWDCHK
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}B'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWDCHK'
      register: nopwdchk_result

    - name: TC20 create a library with become_user_password=*NOPWDSTS
      ibmi_cl_command:
        cmd: 'qsys/crtlib {{libname}}C'
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '*NOPWDSTS'
      register: nopwdsts_result

    ## Run become to access IFS folder
    - name: Create a folder owned by other user, with 700
      file:
        path: /home/{{ansible_ssh_user}}
        owner: '{{ansible_ssh_user}}'
        state: directory
        mode: '700'

    - name: Create a folder owned by other user, with 700
      file:
        path: /home/{{becomeuser}}.txt
        owner: '{{becomeuser}}'
        state: touch
        mode: '700'

    - name: Try copy a IFS file to folder
      ibmi_cl_command:
        cmd: CPY OBJ('/home/{{becomeuser}}.txt') TODIR('/home/{{ansible_ssh_user}}')
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: ifs_result
      failed_when: ifs_result.failed != true

    ## Run become to access IFS folder
    - name: Create a folder owned by other user, with 700
      file:
        path: /home/{{ansible_ssh_user}}.txt
        owner: '{{ansible_ssh_user}}'
        state: touch
        mode: '700'

    - name: Try copy a IFS file to folder
      ibmi_cl_command:
        cmd: WRJLNK LNK('/home/{{ansible_ssh_user}}.txt') TODIR('/home/{{ansible_ssh_user}}')
        become_user: '{{becomeuser.upper()}}'
        become_user_password: '{{becomepwd}}'
      register: ifs_result
      failed_when: ifs_result.failed != true

    - name: search the module log to ensure password is not logged.
      shell: 'cat /var/log/ibmi_ansible_modules.log | grep "{{becomepwd}}"  | wc -l'
      register: check_pwd_count

    - name: assert the count
      assert:
        that:
         - check_pwd_count.stdout | int == 0

  always:
    - set_fact:
        ansible_ssh_user: '{{ansible_ssh_user_org}}'
        ansible_ssh_pass: '{{ansible_ssh_pass_org}}'
      #no_log: true
      ignore_errors: true

    - name: delete the user profile
      ibmi_user_and_group:
        operation: 'delete'
        user: '{{becomeuser}}'
        parameters: "OWNOBJOPT(*DLT)"
      register: user_result
      ignore_errors: true

    - name: delete the user profile
      ibmi_user_and_group:
        operation: 'delete'
        user: '{{nopwd_user}}'
        parameters: "OWNOBJOPT(*DLT)"
      register: user_result
      ignore_errors: true

    - name: delete libraries
      ibmi_cl_command:
        cmd: qsys/dltlib {{libname}}{{item}}
      loop: "{{ range(1, 9)|list }}"
      ignore_errors: true

    - name: delete libraries
      ibmi_cl_command:
        cmd: qsys/dltlib {{libname}}{{item}}
      loop: [a, b, c, d]
      ignore_errors: true

    - name: remove temporary file
      command: rm -rf /home/{{ansible_ssh_user}}.txt
      ignore_errors: true

    - name: remove temporary file
      command: rm -rf /home/{{becomeuser}}.txt
      ignore_errors: true
