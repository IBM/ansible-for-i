# test code for the ibmi_fix_repo module
# (c) 2020, zhaoyao <zhaoyao@cn.ibm.com>
#
# GNU General Public License v3 or later (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt )
#

- block:
  - name: TC00A - get ansible host os400 version
    shell: system "DSPSFWRSC" | grep "5770SS1" | head -n 1 | awk '{print $2}'
    register: osinfo
  - set_fact:
      os400_ver: "{{osinfo.stdout}}"
    failed_when: osinfo.rc != 0
  - debug:
      msg: "{{os400_ver}}"  
  - set_fact:  # pre-define some ptfs/groups for each os version to test
               # IBM i Group PTFs with level --> https://www.ibm.com/support/pages/ibm-i-group-ptfs-level
      ptfs: ['SI69340', 'SI71891', 'SI69764']
      ptf_grps: ['SF99667']  # group 1, group 2( with different levels) , group 3 - cum
    when: os400_ver == "V7R4M0"
  - set_fact:  
      ptfs: ['SI70439', 'SI70668', 'SI68580']
      ptf_grps: ['SF99867']
    when: os400_ver == "V7R3M0"
  - set_fact:  
      ptfs: ['SI70445', 'SI70447', 'SI61206']
      ptf_grps: ['SF99767']
    when: os400_ver == "V7R2M0"
  - name: install sqlite3 and pip3 as needed
    command:
      cmd: /QOpenSys/pkgs/bin/yum install sqlite3 libsqlite3 python3-pip -y 
    register: install_status
    failed_when: install_status.rc != 0

  - name: TC00B - install pip3-requests as needed
    command:
      cmd: /QOpenSys/pkgs/bin/pip3 install requests
    register: install_status
    failed_when: install_status.rc != 0

  - name: TC00C - get latest group ptf info on PSP
    ibmi_fix_group_check:
      groups: '{{ptf_grps[0]}}'
    register: fix_group_check_result
    failed_when: fix_group_check_result.rc != 0

  - name: TC00C - set fact
    set_fact:
      returned_ptf_group_number: "{{fix_group_check_result.group_info[0]['ptf_group_number']}}"
      returned_ptf_group_level: "{{fix_group_check_result.group_info[0]['ptf_group_level']}}"
      returned_ptf_group_release_date: "{{fix_group_check_result.group_info[0]['release_date']}}"
      returned_ptf_group_ptf_list: "{{fix_group_check_result.group_info[0]['ptf_list']}}"
    when: fix_group_check_result.group_info != []  

  - name: TC01A - Download a PTF group
    ibmi_download_fix:
      ptf_id: '{{ptf_grps[0]}}'
      delivery_format: '*IMAGE'
    register: download_fix
    failed_when: download_fix.rc != 0

  - name: TC01A - add ptf group info to table from previous step, use checksum false to add to database, waiting for downloading.
    ibmi_fix_repo:
      action: 'add'
      type: 'ptf_group'
      checksum: false
      parameters:
        - {'ptf_group_number':"{{returned_ptf_group_number}}", 'ptf_group_level':"{{returned_ptf_group_level}}", 'ptf_list':"{{returned_ptf_group_ptf_list}}", 'release_date':"{{returned_ptf_group_release_date}}"} 
    register: add_result

  - name: TC01B - add download status record
    ibmi_fix_repo:
      action: 'add'
      type: 'download_status'
      parameters:
        - {'order_id':"{{download_fix.order_id}}", 'file_path':"{{download_fix.file_path}}", 'download_status':'DOWNLOADING'}
    register: add_ds

  - name: TC01C - query some PTFs records
    ibmi_fix_repo:
      action: "find"
      type: 'download_status'
      parameters: 
        - {'order_id':"{{download_fix.order_id}}", 'file_path':"{{download_fix.file_path}}"}
    register: find_ds

  - name: TC01C - Assert values
    assert:
      that:
        - find_ds.success_list | length == 1
        - find_ds.success_list | selectattr('order_id', 'equalto', "{{download_fix.order_id}}")
        - find_ds.success_list | selectattr('file_path', 'equalto', "{{download_fix.file_path}}")
        - find_ds.success_list | selectattr('download_status', 'equalto', 'DOWNLOADING')                
        - find_ds.type == "download_status"

  - name: TC01C - wait for download completes
    ibmi_download_fix_status:
      order_list: "{{download_fix.order_id}}"
    register: ds
    failed_when: ds.rc != 0
    until: ds.status[0]['download_status'] == "DOWNLOADED"
    retries: 100
    delay: 30

  - name: TC01D - update ptf_group table after downloading completes
    ibmi_fix_repo:
      action: 'update'
      type: 'ptf_group'
      checksum: true
      parameters:
        - {'order_id':"{{download_fix.order_id}}", 'file_path':"{{download_fix.file_path}}", 'ptf_group_number':"{{returned_ptf_group_number}}", 'ptf_group_level':"{{returned_ptf_group_level}}", 'release_date':"{{returned_ptf_group_release_date}}"} 
    register: upd_result

  - name: TC01D - update download_status table after downloading completes
    ibmi_fix_repo:
      action: 'update'
      type: 'download_status'
      parameters:
        - {'order_id':"{{download_fix.order_id}}", 'file_path':"{{download_fix.file_path}}", 'download_status':'DOWNLOADED'}
    register: update_ds

  - name: TC01D - Assert values
    assert:
      that:
        - update_ds.action == "update"
        - update_ds.row_changed == 1
        - update_ds.type == "download_status"      
        - upd_result.parameters | selectattr('checksum', 'defined')
        - upd_result.parameters | selectattr('description', 'defined')
        - upd_result.parameters | selectattr('file_name', 'defined')
        - upd_result.parameters | selectattr('checksum', 'defined')
        - upd_result.parameters | selectattr('order_id','equalto', "{{download_fix.order_id}}")
        - upd_result.parameters | selectattr('ptf_group_level', 'equalto',"{{returned_ptf_group_level}}")
        - upd_result.parameters | selectattr('ptf_group_number', 'equalto',"{{returned_ptf_group_number}}")
        - upd_result.parameters | selectattr('ptf_list', 'defined')
        - upd_result.parameters | selectattr('release_date', 'equalto', "{{returned_ptf_group_release_date}}")
        - upd_result.parameters | selectattr('url', 'defined')
        - upd_result.parameters | selectattr('release', 'match','R[0-9][0-9][0-9]')
        - upd_result.sql is defined
        - upd_result.type == 'ptf_group'

  - name: TC01E - query some PTFs records
    ibmi_fix_repo:
      checksum: true
      action: "find"
      type: 'ptf_group'
      parameters:
        - {'ptf_group_number':'{{returned_ptf_group_number}}', 'ptf_group_level':'{{returned_ptf_group_level}}'}
    register: query_result    

  - name: TC01E - Assert values
    assert:
      that:
        - query_result.action == 'find'
        - query_result.type == 'ptf_group'
        - query_result.sql is defined
        - query_result.success_list | selectattr('add_time','defined')
        - query_result.success_list | selectattr('checksum','defined')
        - query_result.success_list | selectattr('description','defined')
        - query_result.success_list | selectattr('file_name','defined')
        - query_result.success_list | selectattr('file_path','equalto',"{{download_fix.file_path}}")
        - query_result.success_list | selectattr('id','defined')
        - query_result.success_list | selectattr('order_id','equalto',"{{download_fix.order_id}}")
        - query_result.success_list | selectattr('ptf_group_level','equalto',"{{returned_ptf_group_level}}")
        - query_result.success_list | selectattr('ptf_group_number','equalto',"{{returned_ptf_group_number}}")
        - query_result.success_list | selectattr('ptf_group_status','equalto','Match')
        - query_result.success_list | selectattr('ptf_list','defined')
        - query_result.success_list | selectattr('release','R[0-9][0-9][0-9]')
        - query_result.success_list | selectattr('release_date','equalto',"{{returned_ptf_group_release_date}}") 

  - name: TC01F - find download_status with additional parameters
    ibmi_fix_repo:
      checksum: false
      action: "find"
      type: 'download_status'
      parameters:
        - {'order_id':"{{download_fix.order_id}}", 'additional_param':'ORDER BY ptf_group_level DESC LIMIT 1' }
    register: fa_ds_result      

  - name: TC01F - assert values
    assert:
      that:
        - fa_ds_result.row_changed == -1
        - fa_ds_result.action == "find"
        - fa_ds_result.type == "download_status"
        - fa_ds_result.success_list | length == 1
        - fa_ds_result.success_list[0]['file_path'] == "{{download_fix.file_path}}"
        - fa_ds_result.success_list[0]['order_id'] == "{{download_fix.order_id}}"

  - name: TC01G - delete some PTFs records by using order_id and file_path
    ibmi_fix_repo:
      action: "delete"
      type: 'ptf_group'
      parameters:
        - {'order_id':"{{download_fix.order_id}}", 'file_path':"{{download_fix.file_path}}"} 
    register: delete_result

  - name: TC01G - Assert values
    assert:
      that:
        - delete_result.action == 'delete'
        - delete_result.type == 'ptf_group'
        - delete_result.sql is defined 
        - delete_result.parameters | selectattr('order_id','equalto',"{{download_fix.order_id}}")
        - delete_result.parameters | selectattr('file_path','equalto',"{{download_fix.file_path}}")
        - delete_result.row_changed == 1

  - name: TC01H - delete some PTFs records
    ibmi_fix_repo:
      action: "delete"
      type: 'download_status'
      parameters: 
        - {'order_id':"{{download_fix.order_id}}", 'file_path':"{{download_fix.file_path}}"} 
    register: del_ds

  - name: TC01H - assert values
    assert:
      that:
        - del_ds.row_changed == 1
        - del_ds.action == "delete"
        - del_ds.type == "download_status"
        - del_ds.sql != ""
        - del_ds.parameters[0]['order_id'] == "{{download_fix.order_id}}"
        - del_ds.parameters[0]['file_path'] == "{{download_fix.file_path}}"

  - name: TC01I - query some PTFs records - download_status
    ibmi_fix_repo:
      action: "find"
      type: 'download_status'
      parameters: 
        - {'order_id':"{{download_fix.order_id}}"}
    register: find_ds

  - name: TC01I - assert values
    assert:
      that:
        - find_ds.row_changed == -1
        - find_ds.action == "find"
        - find_ds.type == "download_status"
        - find_ds.fail_list | length == 1
        - find_ds.fail_list[0]['db_record'] == "RECORD_NOT_FOUND"
        - find_ds.fail_list[0]['order_id'] == "{{download_fix.order_id}}"

  - name: TC01J - query some PTFs records - ptf_group
    ibmi_fix_repo:
      action: "find"
      type: 'ptf_group'
      parameters: 
        - {'order_id':"{{download_fix.order_id}}", 'file_path':"{{download_fix.file_path}}", 'ptf_group_number':"{{returned_ptf_group_number}}", 'ptf_group_level':"{{returned_ptf_group_level}}", 'release_date':"{{returned_ptf_group_release_date}}"} 
    register: find_ptfg

  - name: TC01J - assert values
    assert:
      that:
        - find_ptfg.row_changed == -1
        - find_ptfg.action == "find"
        - find_ptfg.type == "ptf_group"
        - find_ptfg.fail_list | length == 1
        - find_ptfg.fail_list[0]['db_record'] == "RECORD_NOT_FOUND"
        - find_ptfg.fail_list[0]['order_id'] == "{{download_fix.order_id}}"
        - find_ptfg.fail_list[0]['file_path'] == "{{download_fix.file_path}}"
        - find_ptfg.fail_list[0]['ptf_group_number'] == "{{returned_ptf_group_number}}"
        - find_ptfg.fail_list[0]['ptf_group_level'] == "{{returned_ptf_group_level}}"
        - find_ptfg.fail_list[0]['release_date'] == "{{returned_ptf_group_release_date}}"                               

  - name: TC02A - delete PTF prior to downloading with reorder *YES
    ibmi_cl_command: 
      cmd: DLTOBJ OBJ(Q{{ptfs[0]}}) OBJTYPE(*FILE)
    ignore_errors: true  

  - name: TC02A - download single PTFs via SNDPTFORD
    ibmi_download_fix:
      product: '5770SS1'  
      release: "{{os400_ver}}"
      ptf_id: '{{ptfs[0]}}'
      reorder: '*YES'
      order: '*PTFID'
      wait: true
      delivery_format: '*SAVF'
    register: dl_sp  

  - name: TC02B - copy a PTF to another library - create a temp lib
    ibmi_cl_command:
      cmd: 'CRTLIB TEMPLIB'

  - name: TC02B - copy a PTF to another library - copy
    ibmi_cl_command:
      cmd: CRTDUPOBJ OBJ({{dl_sp.download_list[0]['file_name']}}) FROMLIB(QGPL) OBJTYPE(*FILE) TOLIB(TEMPLIB) DATA(*YES)


  - name: TC02C - test single_ptf option of type - add a single ptf to db, ptf_id and file_path are required.
    ibmi_fix_repo:
      action: 'add'
      checksum: true 
      type: 'single_ptf'
      parameters:
        - {'product':'5770SS1', 'ptf_id':'{{ptfs[0]}}', 'file_path':"{{dl_sp.download_list[0]['file_path']}}"} 
        - {'product':'5770SS1', 'ptf_id':'{{ptfs[0]}}', 'file_name':"{{dl_sp.download_list[0]['file_name']}}", 'file_path':"{{dl_sp.download_list[0]['file_path']}}"} 
        - {'product':'5770SS1', 'ptf_id':'{{ptfs[0]}}', 'file_name':"Q{{ptfs[0]}}", 'file_path':'/QSYS.LIB/TEMPLIB.LIB/Q{{ptfs[0]}}.FILE'} # customized file_path
    register: sp_result

  - name: TC02C - Assert values
    assert:
      that:
        - sp_result.action == "add"
        - sp_result.row_changed == 3
        - sp_result.type == "single_ptf"
        - sp_result.sql != ""

  - name: TC02D - query in single_ptf table
    ibmi_fix_repo:
      action: 'find'
      checksum: false 
      type: 'single_ptf'
      parameters:
        - {'ptf_id':'{{ptfs[0]}}'}
        - {'ptf_id':'{{ptfs[0]}}', 'file_name':"{{dl_sp.download_list[0]['file_name']}}", 'file_path':"{{dl_sp.download_list[0]['file_path']}}"} 
        - {'ptf_id':'{{ptfs[0]}}', 'file_name':"{{dl_sp.download_list[0]['file_name']}}", 'file_path':"/QSYS.LIB/TEMPLIB.LIB/{{dl_sp.download_list[0]['file_name']}}"}
    register: sp_result  

  - name: TC02D - Assert values
    assert:
      that:
        - sp_result.action == "find"
        - sp_result.success_list | length == 1  
        - sp_result.success_list[0]['file_path'] == "/QSYS.LIB/TEMPLIB.LIB/{{dl_sp.download_list[0]['file_name']}}.FILE" # only hit the latest one
        - sp_result.row_changed == -1
        - sp_result.type == "single_ptf"
        - sp_result.fail_list | length == 2
        - sp_result.fail_list[0]['db_record'] == "RECORD_NOT_FOUND"
        - sp_result.fail_list[1]['db_record'] == "RECORD_NOT_FOUND"

  - name: TC02E - query single_ptf with addtional parameters
    ibmi_fix_repo:
      action: "find"                                                                                                                   
      type: 'single_ptf'
      parameters:
        - {'product':'5770SS1', 'additional_param':'ORDER BY ptf_id DESC LIMIT 1'}  
    register: sp_result

  - name: TC02E - Assert values
    assert:
      that:
        - sp_result.action == "find"
        - sp_result.success_list | length == 1
        - sp_result.success_list | selectattr('db_record', 'equalto', 'MATCH')
        - sp_result.row_changed == -1
        - sp_result.type == "single_ptf"
        - sp_result.fail_list is not defined

  - name: TC02F - update in single_ptf table
    ibmi_fix_repo:
      action: 'update'
      checksum: true 
      type: 'single_ptf'
      parameters:
        - {'product':'5770SS1', 'ptf_id':'{{ptfs[0]}}', 'file_path':"{{dl_sp.download_list[0]['file_path']}}"}
    register: sp_result  

  - name: TC02F - Assert values
    assert:
      that:
        - sp_result.action == "update"
        - sp_result.row_changed == 1
        - sp_result.type == "single_ptf"

  - name: TC02G - delete in single_ptf table
    ibmi_fix_repo:
      action: 'delete'
      checksum: true 
      type: 'single_ptf'
      parameters:
        - {'ptf_id':'{{ptfs[0]}}'}
    register: sp_result  

  - name: TC02G - Assert values
    assert:
      that:
        - sp_result.action == "delete"
        - sp_result.row_changed == 1
        - sp_result.type == "single_ptf"

  - name: TC03 - Negative test - add a non-existing order id or path
    ibmi_fix_repo:
      action: 'add'
      checksum: true
      type: 'ptf_group'
      parameters:
        - {'release_date':'unknown', 'ptf_group_level':'99999', 'ptf_group_number':'SF99999', 'order_id':'notexist', 'file_path':'/QIBM/UserData/OS/Service/ECS/PTF/notexist'} 
    register: neg_result  
    
  - name: TC03 - Assert values
    assert:
      that:
        - neg_result.fail_list | selectattr('msg', 'equalto', 'Specified image path [/QIBM/UserData/OS/Service/ECS/PTF/notexist] is not a valid directory')
        - neg_result.fail_list | selectattr('rc', 'equalto', '-2')

  - name: TC04A - Negative test - missing required parameters for ptf_group. ptf_group_number, ptf_group_level, release_date, file_path are required
    ibmi_fix_repo:
      action: 'add'
      type: 'ptf_group'
      checksum: true
      parameters:
        - {'file_path':"/QIBM/UserData/OS/Service/ECS/PTF/notexist"}
        - {'ptf_group_number':'{{returned_ptf_group_number}}'}
        - {'ptf_group_number':'{{returned_ptf_group_number}}', 'ptf_group_level':'{{returned_ptf_group_level}}'}
        - {'ptf_group_number':'{{returned_ptf_group_number}}', 'ptf_group_level':'{{returned_ptf_group_level}}', 'release_date':'{{returned_ptf_group_release_date}}'}
    register: neg_result 
   
  - name: TC04A - Assert values
    assert:
      that:
        - neg_result.fail_list | selectattr('msg', 'Match', 'Required parameter * is missing in parameters')
        - neg_result.fail_list | selectattr('rc', 'equalto', '-1')
        - neg_result.fail_list | length == 4

  - name: TC04B - Negative test - missing required parameters for single_ptf, id and product are must
    ibmi_fix_repo:
      action: 'add'
      type: 'single_ptf'
      checksum: true
      parameters:
        - {'ptf_id':"{{ptfs[0]}}"}  # missing product
        - {'product':'5770SS1'}  # missing ptf_id
    register: neg_result 

  - name: TC04B - Assert values
    assert:
      that:
        - neg_result.fail_list | selectattr('msg', 'Match', 'Required parameter * is missing in parameters')
        - neg_result.fail_list | selectattr('rc', 'equalto', '-1')
        - neg_result.fail_list | length == 2

  - name: TC04C - Negative test - missing required parameters for download_status, order_id is required
    ibmi_fix_repo:
      action: 'add'
      type: 'download_status'
      parameters:
        - {'file_path':'/qsys.lib/qgpl.lib/SIabcde.file'}  # missing order_id
    register: neg_result 

  - name: TC04C - Assert values
    assert:
      that:
        - neg_result.fail_list | selectattr('msg', 'Match', 'Required parameter * is missing in parameters')
        - neg_result.fail_list | selectattr('rc', 'equalto', '-1')
        - neg_result.fail_list | length == 1

  - name: TC04D - Negative test - delete a non-existing record from db
    ibmi_fix_repo:
      action: 'delete'
      type: 'ptf_group'
      checksum: true
      parameters:
        - {'ptf_group_number':'{{returned_ptf_group_number}}', 'ptf_group_level':'{{returned_ptf_group_level | int - 1}}'} # this record has been deleted in previous step
    register: neg_result  

  - name: TC04D - Assert values
    assert:
      that: 
        - neg_result.row_changed == 0   

  - name: TC04E - Negative test - invalid action provided
    ibmi_fix_repo:
      action: 'query'  # not a valid action
      type: 'ptf_group'
      checksum: true
      parameters:
        - {'order_id':'2023205812', 'file_path':'/QIBM/UserData/OS/Service/ECS/PTF/2023205812'}
    register: neg_result
    failed_when: neg_result.failed == 0  

  - name: TC04E - Assert value
    assert:
      that:
        - '"Unsupported action: query" in neg_result.msg'      

  - name: TC04F - Negative test - when adding single_ptf record with invalid ptf_id/file_path/product id
    ibmi_fix_repo:
      action: 'add'  
      type: 'single_ptf'
      checksum: true
      parameters:
        - {'product':'5770SS1', 'ptf_id':'{{ptfs[0]}}', 'file_path':'/QSYS.LIB/QGPL.LIB/NOTEXIST.FILE'}  #invalid file_path
        - {'product':'5770SS1', 'file_path':'/QSYS.LIB/QGPL.LIB/NOTEXIST.FILE'}  #missing required parameter - ptf_id
        - {'ptf_id':'{{ptfs[0]}}', 'file_path':'/QSYS.LIB/QGPL.LIB/Q{{ptfs[0]}}.FILE'}  # missing required parameter - product
        - {'product':'NONEXIST', 'ptf_id':'{{ptfs[0]}}'} # missing required parameter - file path
    register: neg_result  

  - name: TC04F - Assert Values
    assert:
      that:
        - neg_result.fail_list | length == 4
        - neg_result.fail_list[0] | selectattr('msg','equalto','Required parameter [file_path] is missing in parameters')
        - neg_result.fail_list[0] | selectattr('rc','equalto','-1')
        - neg_result.fail_list[0] | selectattr('ptf_id','equalto','{{ptfs[0]}}')
        - neg_result.fail_list[1] | selectattr('msg','equalto','Target image file [/QSYS.LIB/QGPL.LIB/NOTEXIST.FILE] is not readable')
        - neg_result.fail_list[1] | selectattr('rc','equalto','-3')
        - neg_result.fail_list[1] | selectattr('ptf_id','equalto','{{ptfs[0]}}')

  - name: TC04G - Negative test - try to find a non-exist single_ptf record 
    ibmi_fix_repo:
      action: 'find'  
      type: 'single_ptf'
      parameters:
        - {'ptf_id':'{{ptfs[2]}}'}  
    register: neg_result  

  - name: TC04G - Assert Values
    assert:
      that:
        - neg_result.parameters | selectattr('db_record','equalto', 'RECORD_NOT_FOUND')

  - name: TC04H - Negative test - try to delete a non-exist single_ptf record    
    ibmi_fix_repo:
      action: 'delete'  
      type: 'single_ptf'
      parameters:
        - {'ptf_id':'{{ptfs[2]}}'}  
    register: neg_result  

  - name: TC04H - Assert Values
    assert:
      that:
        - neg_result.row_changed == 0

  always:
    - name: remove the downloaded ptf folder
      file:
        path: "{{download_fix.file_path}}"
        state: absent
      when: download_fix is defined  

    - name: remove the temp lib
      ibmi_cl_command:
        cmd: "DLTLIB TEMPLIB"
      ignore_errors: true

    - name: run sql to drop the ptf_group table
      ibmi_fix_repo:
        action: "clear"
        type: 'ptf_group'

    - name: run sql to drop the download status table
      ibmi_fix_repo:
        action: "clear"
        type: 'download_status'

    - name: run sql to drop the single_ptf table
      ibmi_fix_repo:
        action: "clear"
        type: 'single_ptf'
