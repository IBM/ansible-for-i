# Copyright (c) IBM Corporation 2019, 2020
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

# Description:
  # The sample file is to provide an example about how to query and check system values

# Restriction: 
  # You must have either all object (*ALLOBJ) or audit (*AUDIT) special authority to retrieve
  # the values for QAUDCTL, QAUDENDACN, QAUDFRCLVL, QAUDLVL, QAUDLVL2, and QCRTOBJAUD

# Parameters:
  # sysvalue --  The list containing the system values to be checked
---
- hosts: all
  gather_facts: false
  collections:
   - ibm.power_ibmi

  tasks:
  - block:
    - name: Display a system value
      ibmi_sysval:
        sysvalue:
          - {'name':'qccsid'}
      register: dspsysval_ccsid_result

    - name: Display the returned parameters
      debug:
        msg: "{{ dspsysval_ccsid_result }}"

    - name: Assert the returned parameters
      assert:
        that:
          - dspsysval_ccsid_result.sysval | length == 1
          - dspsysval_ccsid_result.sysval[0].name == 'QCCSID'
          - dspsysval_ccsid_result.sysval[0].type == '10i0'
          - dspsysval_ccsid_result.sysval[0].value | int >= 0 and dspsysval_ccsid_result.sysval[0].value | int <= 65535

    - name: Check a system value with expected range
      ibmi_sysval:
        sysvalue:
          - {'name':'qmaxsign', 'expect':3}
          - {'name':'qmaxsign', 'expect':'[-1,3]', 'check':'range'}
          - {'name':'qmaxsign', 'expect':'[,3]', 'check':'range'}
          - {'name':'qmaxsign', 'expect':'[3,]', 'check':'range'}
          - {'name':'qmaxsign', 'expect':'[3,100]', 'check':'range'}
          # - {'name':'qmaxsign', 'expect':'[-1,3)', 'check':'range'}
          # - {'name':'qmaxsign', 'expect':'(,3)', 'check':'range'}
          # - {'name':'qmaxsign', 'expect':'(3,]', 'check':'range'}
          # - {'name':'qmaxsign', 'expect':'(3,100]', 'check':'range'}
      register: chksysval_qmaxsign_result

    - name: Display the returned parameters
      debug:
        msg: "{{ chksysval_qmaxsign_result }}"

    - name: Assert the returned parameters
      assert:
        that:
          - chksysval_qmaxsign_result.sysval | length >= 1
          - chksysval_qmaxsign_result.sysval[0].name == 'QMAXSIGN'
          - chksysval_qmaxsign_result.sysval[0].type == '8A'
          - chksysval_qmaxsign_result.sysval[0].compliant | bool

    - name: Display many system values
      ibmi_sysval:
        sysvalue:
          - {'name':'qccsid', 'expect':'[0,65535]', 'check':'range'}
          - {'name':'qmaxsign'}
          - {'name':'qmaxsgnacn'}
      register: dissysval_result

    - name: Display the many returned parameters
      debug:
        msg: "{{ dissysval_result }}"

    - name: Assert the many returned parameters
      assert:
        that:
          - dissysval_result.sysval | length == 3
          - dissysval_result.sysval[0].name == 'QCCSID'
          - dissysval_result.sysval[0].type == '10i0'
          - dissysval_result.sysval[0].value | int >= 0 and dissysval_result.sysval[0].value | int <= 65535
          - dissysval_result.sysval[1].name == 'QMAXSIGN'
          - dissysval_result.sysval[1].type == '8A'
          - dissysval_result.sysval[2].name == 'QMAXSGNACN'
          - dissysval_result.sysval[2].type == '4A'

    - name: Check many system values with expected values
      ibmi_sysval:
        sysvalue:
          - {'name':'qmaxsign', 'expect':'[1,8]', 'check':'range'}
          - {'name':'qmaxsgnacn', 'expect':'3'}
          - {'name':'qccsid'}
      register: chksysval_result

    - name: Display the many returned parameters
      debug:
        msg: "{{ chksysval_result }}"

    - name: Assert the many returned parameters
      assert:
        that:
          - chksysval_result.sysval | length == 3
          - chksysval_result.sysval[0].name == 'QMAXSIGN'
          - chksysval_result.sysval[0].type == '8A'
          - chksysval_result.sysval[0].compliant | bool
          - chksysval_result.sysval[1].name == 'QMAXSGNACN'
          - chksysval_result.sysval[1].type == '4A'
          - chksysval_result.sysval[1].value == chksysval_result.sysval[1].expect
          - chksysval_result.sysval[1].compliant | bool
          - chksysval_result.sysval[2].name == 'QCCSID'
          - chksysval_result.sysval[2].type == '10i0'
          - chksysval_result.sysval[2].value | int >= 0 and chksysval_result.sysval[2].value | int <= 65535

    - name: Check with equal_as_list option
      ibmi_sysval:
        sysvalue:
          - {'name':'QATNPGM', 'expect':'QEZMAIN   QSYS'}
          - {'name':'QATNPGM', 'expect':'QSYS  QEZMAIN'}
          - {'name':'QATNPGM', 'expect':'QEZMAIN  QSYS', 'check':'equal_as_list'}
          - {'name':'QATNPGM', 'expect':'QSYS QEZMAIN', 'check':'equal_as_list'}
      register: chksysval_equal_as_list

    - name: Display check with equal_as_list option
      debug:
        msg: "{{ chksysval_equal_as_list }}"
