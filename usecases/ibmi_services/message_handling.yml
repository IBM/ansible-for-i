# Copyright (c) IBM Corporation 2019, 2020
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)
---
- name: Playbook to examine system messages
  hosts: all
  gather_facts: false

  vars:
    become_user_name: null
    become_user_password: null

  tasks:
    - name: Examine history log messages since the previous IPL and determine whether the next IPL will be abnormal or normal
      ibm.power_ibmi.ibmi_sql_query:
        sql: "WITH last_ipl (ipl_time) AS (
                      SELECT job_entered_system_time
                          FROM TABLE (
                                  qsys2.job_info(job_status_filter => '*ACTIVE', job_user_filter => 'QSYS')
                              ) x
                          WHERE job_name = '000000/QSYS/SCPF'
                  ),
                  abnormal (abnormal_count) AS (
                      SELECT COUNT(*)
                          FROM last_ipl,
                                TABLE (
                                    qsys2.history_log_info(ipl_time, CURRENT TIMESTAMP)
                                ) x
                          WHERE message_id IN ('CPC1225')
                  )
                  SELECT
                      CASE
                          WHEN abnormal_count = 0 THEN 'NEXT IPL WILL BE NORMAL'
                          ELSE 'NEXT IPL WILL BE ABNORMAL - ABNORMAL END COUNT: ' CONCAT abnormal_count
                      END AS next_ipl_indicator
                      FROM abnormal"
        become_user: '{{ become_user_name }}'
        become_user_password: '{{ become_user_password }}'
      register: next_ipl_status
      tags: next_ipl_indicator
      failed_when: false

    - name: Get whether next IPL is abnormal
      ansible.builtin.assert:
        that:
          - next_ipl_status.row[0].NEXT_IPL_INDICATOR == 'NEXT IPL WILL BE NORMAL'
      tags: next_ipl_indicator
      failed_when: false

    - name: Examine all system operator inquiry messages that have a reply
      ibm.power_ibmi.ibmi_sql_query:
        sql: "SELECT a.message_text AS INQUIRY,
              b.message_text AS REPLY,
              B.FROM_USER,
              B.*,
              A.*
              FROM qsys2.message_queue_info a
              INNER JOIN qsys2.message_queue_info b
              ON a.message_key = b.associated_message_key
              WHERE A.MESSAGE_QUEUE_NAME = 'QSYSOPR'
              AND A.MESSAGE_QUEUE_LIBRARY = 'QSYS'
              AND B.MESSAGE_QUEUE_NAME = 'QSYSOPR'
              AND B.MESSAGE_QUEUE_LIBRARY = 'QSYS'
              ORDER BY b.message_timestamp DESC"
        become_user: '{{ become_user_name }}'
        become_user_password: '{{ become_user_password }}'
      register: sys_op_inq_msg
      tags:
        - all_sys_op_inq_msg_with_reply
      failed_when: false

    - name: Get all system operator inquiry messages that have a reply
      ansible.builtin.debug:
        msg: "{{ sys_op_inq_msg.row }}"
      tags: all_sys_op_inq_msg_with_reply
      failed_when: false

    - name: Examine all system operator inquiry messages that have no reply
      ibm.power_ibmi.ibmi_sql_query:
        sql: "WITH REPLIED_MSGS (KEY) AS (
                      SELECT a.message_key
                          FROM qsys2.message_queue_info a
                              INNER JOIN qsys2.message_queue_info b
                                  ON a.message_key = b.associated_message_key
                          WHERE A.MESSAGE_QUEUE_NAME = 'QSYSOPR'
                                AND A.MESSAGE_QUEUE_LIBRARY = 'QSYS'
                                AND B.MESSAGE_QUEUE_NAME = 'QSYSOPR'
                                AND B.MESSAGE_QUEUE_LIBRARY = 'QSYS'
                          ORDER BY b.message_timestamp DESC)
                  SELECT a.message_text AS INQUIRY,
              A.*
              FROM qsys2.message_queue_info a
              LEFT EXCEPTION JOIN REPLIED_MSGS b
              ON a.message_key = b.KEY
              WHERE MESSAGE_QUEUE_NAME = 'QSYSOPR'
              AND MESSAGE_QUEUE_LIBRARY = 'QSYS'
              AND message_type = 'INQUIRY'
              ORDER BY message_timestamp DESC"
        become_user: '{{ become_user_name }}'
        become_user_password: '{{ become_user_password }}'
        expected_row_count: 0
      register: sys_op_inq_msg_no_rpy
      tags: all_sys_op_inq_msg_with_no_reply
      failed_when: false

    - name: Get all system operator inquiry messages that have a reply
      ansible.builtin.debug:
        msg: "{{ sys_op_inq_msg_no_rpy.row }}"
      tags: all_sys_op_inq_msg_with_no_reply
      failed_when: false
