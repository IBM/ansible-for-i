---
- name: Set result and id
  ansible.builtin.set_fact:
    result: "{{ (report |  selectattr('id', 'search', check_item.id) | list | first).result }}"
    id: "{{ (report |  selectattr('id', 'search', check_item.id) | list | first).id }}"

- name: Block for when result == 'FAIL' and id != '3.10A' and id != '3.10B'
  when: result == 'FAIL' and id != '3.10A' and id != '3.10B'
  block:
    - name: Set desc, vulnerables, remediation
      ansible.builtin.set_fact:
        desc: "{{ (report |  selectattr('id', 'search', check_item.id) | list | first).desc }}"
        vulnerables: "{{ (report |  selectattr('id', 'search', check_item.id) | list | first).vulnerables }}"
        remediation: "{{ (report |  selectattr('id', 'search', check_item.id) | list | first).remediation }}"
    - name: Block for when id != '3.2'
      when: id != '3.2'
      block:
        - name: Prompt fix actions
          ansible.builtin.pause:
            prompt: |
              Start processing {{ desc }}.
              Got vulnerables: {{ vulnerables }}.
              How do you want to fix?
                * Input A for all
                * Input specific values for selective remediation, seperate multiple values with comma,
                  e.g. USER1, USER2, USER3
                * Leave blank and press Enter to skip
          register: user_choice
        - name: Set user_choice_mode
          ansible.builtin.set_fact:
            user_choice_mode: '{{ user_choice.user_input | upper | trim }}'

    - name: Block for when id == '3.2'
      when: id == '3.2'
      block:
        - name: Set failed_by
          ansible.builtin.set_fact:
            failed_by: "{{ (report |  selectattr('id', 'search', check_item.id) | list | first).failed_by }}"
        - name: Prompt for fix actions
          ansible.builtin.pause:
            prompt: |
              Start processing {{ desc }}.
              Got vulnerables: {{ vulnerables }}.
              Failed by: {{ failed_by }}.
              How do you want to fix?
                * Input A for all
                * Leave blank and press Enter to skip
          register: user_choice
        - name: Set user_choice_mode
          ansible.builtin.set_fact:
            user_choice_mode: '{{ user_choice.user_input | upper | trim }}'

    - name: Block for when '"SYS_ONAME_REPLACE" in remediation and id != "3.2"'
      when: '"SYS_ONAME_REPLACE" in remediation and id != "3.2"'
      block:
        - name: Block for when user_choice_mode | length > 0 and user_choice_mode != 'A'
          when: user_choice_mode | length > 0 and user_choice_mode != 'A'
          block:
            - name: Start remediating base on user input {{ id }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: "{{ remediation | replace('SYS_ONAME_REPLACE', item) }}"
                become_user: '{{ become_user_name }}'
                become_user_password: '{{ become_user_password }}'
              with_items: "{{ user_choice_mode.split(',') }}"
            - name: Remediation successfully
              ansible.builtin.set_fact:
                success_list: "{{ success_list + [ id ] }}"
          rescue:
            - name: Remediation failed
              ansible.builtin.set_fact:
                fail_list: "{{ fail_list + [ id ] }}"

        - name: Block for when user_choice_mode | length > 0 and user_choice_mode == 'A'
          when: user_choice_mode | length > 0 and user_choice_mode == 'A'
          block:
            - name: Start remediating all vulnerables of {{ id }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: "{{ remediation | replace('SYS_ONAME_REPLACE', item) }}"
                become_user: '{{ become_user_name }}'
                become_user_password: '{{ become_user_password }}'
              with_items: "{{ vulnerables.split(',') }}"
            - name: Remediation successfully
              ansible.builtin.set_fact:
                success_list: "{{ success_list + [ id ] }}"
          rescue:
            - name: Remediation failed
              ansible.builtin.set_fact:
                fail_list: "{{ fail_list + [ id ] }}"

    - name: Block for when '"USER_NAME_REPLACE" in remediation and id != "3.2"'
      when: '"USER_NAME_REPLACE" in remediation and id != "3.2"'
      block:
        - name: Block for when user_choice_mode | length > 0 and user_choice_mode != 'A'
          when: user_choice_mode | length > 0 and user_choice_mode != 'A'
          block:
            - name: Start remediating base on user input {{ id }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: "{{ remediation | replace('USER_NAME_REPLACE', item) }}"
                become_user: '{{ become_user_name }}'
                become_user_password: '{{ become_user_password }}'
              with_items: "{{ user_choice_mode.split(',') }}"
            - name: Remediation successfully
              ansible.builtin.set_fact:
                success_list: "{{ success_list + [ id ] }}"
          rescue:
            - name: Remediation failed
              ansible.builtin.set_fact:
                fail_list: "{{ fail_list + [ id ] }}"

        - name: Block for when user_choice_mode | length > 0 and user_choice_mode == 'A'
          when: user_choice_mode | length > 0 and user_choice_mode == 'A'
          block:
            - name: Start remediating all vulnerables of {{ id }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: "{{ remediation | replace('USER_NAME_REPLACE', item) }}"
                become_user: '{{ become_user_name }}'
                become_user_password: '{{ become_user_password }}'
              with_items: "{{ vulnerables.split(',') }}"
            - name: Remediation successfully
              ansible.builtin.set_fact:
                success_list: "{{ success_list + [ id ] }}"
          rescue:
            - name: Remediation failed
              ansible.builtin.set_fact:
                fail_list: "{{ fail_list + [ id ] }}"

    - name: Block for when id == '3.2'
      when: id == '3.2'
      block:
        - name: Invalid option Failure
          ansible.builtin.fail:
            msg: "Invalid option, only A or Enter is accepted!"
          when: user_choice_mode | length > 0 and user_choice_mode != 'A'

        - name: Block for when user_choice_mode | length > 0 and user_choice_mode == 'A'
          when: user_choice_mode | length > 0 and user_choice_mode == 'A'
          block:
            - name: Start remediating all vulnerables of {{ id }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: "{{ remediation | replace('SYS_ONAME_REPLACE', item.0) | replace('USER_NAME_REPLACE', item.1) }}"
                become_user: '{{ become_user_name }}'
                become_user_password: '{{ become_user_password }}'
              with_together:
                - "{{ vulnerables.split(',') }}"
                - "{{ failed_by.split(',') }}"
            - name: Remediation successfully
              ansible.builtin.set_fact:
                success_list: "{{ success_list + [ id ] }}"
          rescue:
            - name: Remediation failed
              ansible.builtin.set_fact:
                fail_list: "{{ fail_list + [ id ] }}"

    - name: Block for when id == '5.1' or id == '5.2'
      when: id == '5.1' or id == '5.2'
      block:
        - name: Start remediating base on user input {{ id }}
          ibm.power_ibmi.ibmi_cl_command:
            cmd: "{{ remediation }}"
            become_user: '{{ become_user_name }}'
            become_user_password: '{{ become_user_password }}'
        - name: Remediation successfully
          ansible.builtin.set_fact:
            success_list: "{{ success_list + [ id ] }}"
      rescue:
        - name: Remediation failed
          ansible.builtin.set_fact:
            fail_list: "{{ fail_list + [ id ] }}"

    - name: Block for when user_choice_mode | length == 0
      when: user_choice_mode | length == 0
      block:
        - name: User cancelled.
          ansible.builtin.debug:
            msg: User cancelled.
        - name: Write skip list
          ansible.builtin.set_fact:
            skip_list: "{{ skip_list + [ id ] }}"
