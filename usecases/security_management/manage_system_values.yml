# Copyright (c) IBM Corporation 2019, 2020
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)
---
- name: Playbook to manage system values
  hosts: "{{ target_system | default('all') }}"
  gather_facts: true

  vars:
    become_user_name:
    become_user_password:
    success_list: []
    fail_list: []
    skip_list: []
  tasks:
    - name: Input prompt
      ansible.builtin.pause:
        prompt: |
          You're going to do system value compliance check on {{ ansible_ssh_host }}
          Please input A,B or C for mode selection:
          Check only(A) / Remediate only(B) / Check and Remediate(C)
      register: mode

    - name: Set mode
      ansible.builtin.set_fact:
        mode: "{{ mode.user_input | upper}}"

    - name: Mode selection check
      ansible.builtin.fail:
        msg: Only A/B/C is permitted in mode selection
      when: mode != 'A' and mode != 'B' and mode != 'C'

    - name: Block for mode != 'B'
      when: mode != 'B'
      block:
        - name: Another prompt
          ansible.builtin.pause:
            prompt: |
              Please read level definition and make selection:
                * Level 1: Corporate/Enterprise Environment (general use)
                  Items in this profile intend to:
                    - be practical and prudent
                    - provide a clear security benefit
                    - not negatively inhibit the utility of the technology beyond acceptable means
                * Level 2: High Security/Sensitive Data Environment (limited functionality)
                  Items in this profile may have the following characteristic(s):
                    - are intended for environments or use cases where security is paramount
                    - acts as defense in depth measure
                    - may negatively inhibit the utility or performance of the technology
                * Level 3: IBM i PRTSYSSECA, High Security/Sensitive Data Environment (limited functionality)
                  Items in this profile may have the following characteristic(s):
                    - are intended for environments or use cases where security is paramount
                    - acts as defense in depth measure
                    - may negatively inhibit the utility or performance of the technology
              Type 1, 2 or 3 and press Enter
          register: level

        - name: Set level mode
          ansible.builtin.set_fact:
            level_mode: "{{ level.user_input | trim }}"

        - name: Check input
          ansible.builtin.fail:
            msg: Only 1,2 or 3 is permitted in level selection
          when: level_mode != '1' and level_mode != '2' and level_mode != '3'

        - name: Get timestamp
          ansible.builtin.set_fact:
            timestamp: "{{ ansible_date_time.iso8601_basic_short }}"

        - name: Set check result file
          ansible.builtin.set_fact:
            check_result_file: /tmp/security_management_sysval_report-level{{ level_mode }}-{{ inventory_hostname }}-{{ timestamp }}.json

        - name: Set level 1 entries
          ansible.builtin.set_fact:
            level1:
              - { name: QALWOBJRST, expect: "0", check: equal }
              - { name: QATNPGM, expect: "*NONE", check: equal }
              - { name: QAUDCTL, expect: "*NOQTEMP *OBJAUD *AUDLVL", check: equal_as_list }
              - { name: QAUDENDACN, expect: "*NOTIFY", check: equal }
              - { name: QAUDFRCLVL, expect: "*SYS", check: equal }
              - { name: QAUDLVL, expect: "*AUTFAIL *CREATE *DELETE *OBJMGT *PGMFAIL *SAVRST *SECURITY *SERVICE *SYSMGT", check: equal_as_list }
              - { name: QAUDLVL2, expect: "*NONE", check: equal }
              - { name: QAUTOCFG, expect: "0", check: equal }
              - { name: QAUTORMT, expect: "0", check: equal }
              - { name: QCRTAUT, expect: "*USE", check: equal }
              - { name: QDSCJOBITV, expect: "30", check: equal }
              - { name: QDSPSGNINF, expect: "1", check: equal }
              - { name: QFRCCVNRST, expect: "3", check: equal }
              - { name: QINACTITV, expect: "0000000030", check: equal }
              - { name: QINACTMSGQ, expect: "*DSCJOB", check: equal }
              - { name: QLMTSECOFR, expect: "0", check: equal }
              - { name: QMAXSGNACN, expect: "2", check: equal }
              - { name: QMAXSIGN, expect: "000005", check: equal }
              - { name: QPWDCHGBLK, expect: "24", check: equal }
              - { name: QPWDEXPITV, expect: "90", check: equal }
              - { name: QPWDEXPWRN, expect: "7", check: equal }
              - { name: QPWDLVL, expect: "1", check: equal }
              - { name: QPWDRQDDIF, expect: "8", check: equal }
              - name: QPWDRULES
                expect: "*ALLCRTCHG *DGTLMTAJC *DGTLMTFST *DGTLMTLST *DGTMIN1 *LMTPRFNAME *MAXLEN10 *MINLEN8 *REQANY3 *SPCCHRLMTAJC *SPCCHRLMTFST *SPCCHRLMTLST"
                check: equal_as_list
              - { name: QRETSVRSEC, expect: "1", check: equal }
              - { name: QRMTIPL, expect: "0", check: equal }
              - { name: QRMTSIGN, expect: "*VERIFY", check: equal }
              - { name: QRMTSRVATR, expect: "0", check: equal }
              - { name: QSCANFS, expect: "*ROOTOPNUD", check: equal }
              - { name: QSCANFSCTL, expect: "*ERRFAIL *NOWRTUPG", check: equal }
              - { name: QSECURITY, expect: "40", check: equal }
              - { name: QSHRMEMCTL, expect: "1", check: equal }
              - name: QSSLCSL
                expect: "*AES_128_GCM_SHA256 *AES_256_GCM_SHA384 *CHACHA20_POLY1305_SHA256 *ECDHE_ECDSA_AES_128_GCM_SHA256
                  *ECDHE_ECDSA_AES_256_GCM_SHA384 *ECDHE_RSA_AES_128_GCM_SHA256 *ECDHE_RSA_AES_256_GCM_SHA384"
                check: equal_as_list
              - { name: QSSLCSLCTL, expect: "*OPSYS", check: equal }
              - { name: QSSLPCL, expect: "*TLSV1.3 *TLSV1.2", check: equal }
              - { name: QVFYOBJRST, expect: "3", check: equal }
          when: level_mode == '1'

        - name: Set level 2 entries
          ansible.builtin.set_fact:
            level2:
              - { name: QALWOBJRST, expect: "*NONE", check: equal }
              - { name: QATNPGM, expect: "*NONE", check: equal }
              - { name: QALWUSRDMN, expect: QTEMP, check: equal }
              - { name: QAUDCTL, expect: "*OBJAUD *AUDLVL", check: equal_as_list }
              - { name: QAUDENDACN, expect: "*PWRDWNSYS", check: equal }
              - { name: QAUDFRCLVL, expect: "1", check: equal }
              - { name: QAUDLVL, expect: "*AUTFAIL *CREATE *DELETE *OBJMGT *PGMFAIL *SAVRST *SECURITY *SERVICE *SYSMGT", check: equal_as_list }
              - { name: QAUDLVL2, expect: "*NONE", check: equal }
              - { name: QAUTOCFG, expect: "0", check: equal }
              - { name: QAUTOVRT, expect: "0", check: equal }
              - { name: QAUTORMT, expect: "0", check: equal }
              - { name: QCRTAUT, expect: "*EXCLUDE", check: equal }
              - { name: QCRTOBJAUD, expect: "*ALL", check: equal }
              - { name: QDSCJOBITV, expect: "15", check: equal }
              - { name: QFRCCVNRST, expect: "7", check: equal }
              - { name: QDSPSGNINF, expect: "1", check: equal }
              - { name: QINACTITV, expect: "0000000015", check: equal }
              - { name: QINACTMSGQ, expect: "*ENDJOB", check: equal }
              - { name: QLMTDEVSSN, expect: "1", check: equal }
              - { name: QLMTSECOFR, expect: "0", check: equal }
              - { name: QMAXSGNACN, expect: "3", check: equal }
              - { name: QMAXSIGN, expect: "000003", check: equal }
              - { name: QPWDCHGBLK, expect: "99", check: equal }
              - { name: QPWDLVL, expect: "3", check: equal }
              - { name: QPWDRQDDIF, expect: "1", check: equal }
              - name: QPWDRULES
                expect: "*ALLCRTCHG *DGTLMTAJC *DGTLMTFST *DGTLMTLST *DGTMIN1 *LMTPRFNAME *MAXLEN128 *MINLEN14 *REQANY3 *SPCCHRLMTAJC
                  *SPCCHRLMTFST *SPCCHRLMTLST"
                check: equal_as_list
              - { name: QPWDVLDPGM, expect: "*REGFAC", check: equal }
              - { name: QRETSVRSEC, expect: "0", check: equal }
              - { name: QRMTIPL, expect: "0", check: equal }
              - { name: QRMTSIGN, expect: "*FRCSIGNON", check: equal }
              - { name: QRMTSRVATR, expect: "0", check: equal }
              - { name: QSECURITY, expect: "50", check: equal }
              - { name: QSCANFS, expect: "*ROOTOPNUD", check: equal }
              - { name: QSCANFSCTL, expect: "*ERRFAIL *NOWRTUPG", check: equal }
              - { name: QSHRMEMCTL, expect: "0", check: equal }
              - name: QSSLCSL
                expect: "*AES_128_GCM_SHA256 *AES_256_GCM_SHA384 *CHACHA20_POLY1305_SHA256 *ECDHE_ECDSA_AES_128_GCM_SHA256 *ECDHE_ECDSA_AES_256_GCM_SHA384
                  *ECDHE_RSA_AES_128_GCM_SHA256 *ECDHE_RSA_AES_256_GCM_SHA384"
                check: equal_as_list
              - { name: QSSLCSLCTL, expect: "*OPSYS", check: equal }
              - { name: QSSLPCL, expect: "*TLSV1.3 *TLSV1.2", check: equal }
              - { name: QVFYOBJRST, expect: "5", check: equal }
          when: level_mode == '2'

        - name: Set level 3 entries
          ansible.builtin.set_fact:
            level3:
              - { name: QALWOBJRST, expect: "*NONE", check: equal }
              - { name: QATNPGM, expect: "*NONE", check: equal }
              - { name: QAUDCTL, expect: "*NOQTEMP *OBJAUD *AUDLVL", check: equal_as_list }
              - { name: QAUDENDACN, expect: "*NOTIFY", check: equal }
              - { name: QAUDFRCLVL, expect: "*SYS", check: equal }
              - { name: QAUDLVL, expect: "*AUTFAIL *CREATE *DELETE *OBJMGT *PGMFAIL *SAVRST *SECURITY *SERVICE *SYSMGT", check: equal_as_list }
              - { name: QAUDLVL2, expect: "*NONE", check: equal }
              - { name: QAUTOCFG, expect: "0", check: equal }
              - { name: QAUTORMT, expect: "0", check: equal }
              - { name: QCRTAUT, expect: "*USE", check: equal }
              - { name: QDSCJOBITV, expect: "60", check: equal }
              - { name: QDSPSGNINF, expect: "1", check: equal }
              - { name: QFRCCVNRST, expect: "3", check: equal }
              - { name: QINACTITV, expect: "15", check: equal }
              - { name: QINACTMSGQ, expect: "*DSCJOB", check: equal }
              - { name: QLMTDEVSSN, expect: "1", check: equal }
              - { name: QLMTSECOFR, expect: "1", check: equal }
              - { name: QMAXSGNACN, expect: "3", check: equal }
              - { name: QMAXSIGN, expect: "3", check: equal }
              - { name: QPWDCHGBLK, expect: "24", check: equal }
              - { name: QPWDEXPITV, expect: "90", check: equal }
              - { name: QPWDEXPWRN, expect: "14", check: equal }
              - { name: QPWDLVL, expect: "3", check: equal }
              - { name: QPWDRQDDIF, expect: "1", check: equal }
              - { name: QRETSVRSEC, expect: "1", check: equal }
              - { name: QRMTIPL, expect: "0", check: equal }
              - { name: QRMTSIGN, expect: "*FRCSIGNON", check: equal }
              - { name: QRMTSRVATR, expect: "0", check: equal }
              - { name: QSCANFS, expect: "*ROOTOPNUD", check: equal }
              - { name: QSCANFSCTL, expect: "*ERRFAIL *NOWRTUPG", check: equal }
              - { name: QSECURITY, expect: "50", check: equal }
              - { name: QSHRMEMCTL, expect: "1", check: equal }
              - { name: QVFYOBJRST, expect: "3", check: equal }
              - name: QPWDRULES
                expect_V7R1M0: "*LMTPRFNAME *MINLEN15"
                expect_V7R2M0: "*ALLCRTCHG *LMTPRFNAME *MINLEN15"
                expect_V7R3M0: "*ALLCRTCHG *LMTPRFNAME *MINLEN15"
                expect_V7R4M0: "*ALLCRTCHG *LMTPRFNAME *MINLEN15"
                expect_V7R5M0: "*ALLCRTCHG *LMTPRFNAME *MINLEN15"
                check: equal_as_list
              - name: QSSLCSL
                expect_V7R1M0: "*RSA_AES_128_CBC_SHA256 *RSA_AES_128_CBC_SHA *RSA_AES_256_CBC_SHA256 *RSA_AES_256_CBC_SHA"
                expect_V7R2M0: "*ECDHE_ECDSA_AES_128_GCM_SHA256 *ECDHE_ECDSA_AES_256_GCM_SHA384 *RSA_AES_128_GCM_SHA256 *RSA_AES_256_GCM_SHA384
                  *ECDHE_RSA_AES_128_GCM_SHA256 *ECDHE_RSA_AES_256_GCM_SHA384"
                expect_V7R3M0: "*AES_128_GCM_SHA256 *AES_256_GCM_SHA384 *CHACHA20_POLY1305_SHA256 *ECDHE_ECDSA_AES_128_GCM_SHA256
                  *ECDHE_ECDSA_AES_256_GCM_SHA384 *ECDHE_RSA_AES_128_GCM_SHA256 *ECDHE_RSA_AES_256_GCM_SHA384 *ECDHE_RSA_CHACHA20_POLY1305_SHA256
                  *ECDHE_ECDSA_CHACHA20_POLY1305_SHA256 *RSA_AES_128_GCM_SHA256 *RSA_AES_256_GCM_SHA384"
                expect_V7R4M0: "*OPSYS"
                expect_V7R5M0: "*OPSYS"
                check: equal_as_list
              - name: QSSLCSLCTL
                expect_V7R1M0: "*USRDFN"
                expect_V7R2M0: "*USRDFN"
                expect_V7R3M0: "*USRDFN"
                expect_V7R4M0: "*OPSYS"
                expect_V7R5M0: "*OPSYS"
                check: equal
              - name: QSSLPCL
                expect_V7R1M0: "*TLSV1.2"
                expect_V7R2M0: "*TLSV1.2"
                expect_V7R3M0: "*TLSV1.3 *TLSV1.2"
                expect_V7R4M0: "*OPSYS"
                expect_V7R5M0: "*OPSYS"
                check: equal
          when: level_mode == '3'

        - name: Get ansible host os400 version
          ansible.builtin.shell:
            cmd: set -o pipefail && system "DSPSFWRSC" | grep "5770SS1" | head -n 1 | awk '{print $2}'
          args:
            executable: /bin/bash
          register: osinfo
          changed_when: false

        - name: Initialize info
          ansible.builtin.set_fact:
            os400_ver: "{{osinfo.stdout}}"
            ptfs: []
            ptf_groups: []
          failed_when: osinfo.rc != 0

        - name: OS version
          ansible.builtin.debug:
            msg: "{{os400_ver}}"

        - name: Check if system values compliant with expected
          ansible.builtin.include_tasks: system_value_check.yml
          loop: "{{ level1 }}"
          loop_control:
            loop_var: sysval
          when: level_mode == '1'

        - name: Check if system values compliant with expected
          ansible.builtin.include_tasks: system_value_check.yml
          loop: "{{ level2 }}"
          loop_control:
            loop_var: sysval
          when: level_mode == '2'

        - name: Check if system values compliant with expected
          ansible.builtin.include_tasks: system_value_check.yml
          loop: "{{ level3 }}"
          loop_control:
            loop_var: sysval
          when: level_mode == '3'

        - name: Block for level_mode == '1'
          when: level_mode == '1'
          block:
            - name: Checking particular system values - QAUTOVRT
              ibm.power_ibmi.ibmi_sysval:
                sysvalue:
                  - { name: QAUTOVRT }
              register: autovrt
              ignore_errors: true
            - name: Set autovrt_result for non-zero
              ansible.builtin.set_fact:
                autovrt_result: "{{ autovrt_result | default({}) | combine ({ item.key : item.value }) }}"
              with_items:
                - { key: name, value: QAUTOVRT }
                - { key: actual, value: "{{ autovrt.sysval[0]['value'] }}" }
                - { key: compliant, value: true }
              when: autovrt.rc == 0 and autovrt.sysval[0]['value'] != "0"
            - name: Set autovrt_result with non-zero
              ansible.builtin.set_fact:
                autovrt_result: "{{ autovrt_result | default({}) | combine ({ item.key : item.value }) }}"
              with_items:
                - { key: name, value: QAUTOVRT }
                - { key: actual, value: "{{ autovrt.sysval[0]['value'] }}" }
                - { key: compliant, value: false }
              when: autovrt.rc == 0 and autovrt.sysval[0]['value'] == "0"
            - name: Set report
              ansible.builtin.set_fact:
                report: "{{ report|default([]) + [autovrt_result] }}"

            - name: Checking particular system values - QLMTDEVSSN
              ibm.power_ibmi.ibmi_sysval:
                sysvalue:
                  - { name: QLMTDEVSSN }
              register: qlmtdevssn
              ignore_errors: true
            - name: Set qlmtdevssn result non-zero value
              ansible.builtin.set_fact:
                qlmtdevssn_result: "{{ qlmtdevssn_result | default({}) | combine ({ item.key : item.value }) }}"
              with_items:
                - { key: name, value: QLMTDEVSSN }
                - { key: actual, value: "{{ qlmtdevssn.sysval[0]['value'] }}" }
                - { key: compliant, value: true }
              when: qlmtdevssn.rc == 0 and qlmtdevssn.sysval[0]['value'] != "0"
            - name: Set qlmtdevssn result zero value
              ansible.builtin.set_fact:
                qlmtdevssn_result: "{{ qlmtdevssn_result | default({}) | combine ({ item.key : item.value }) }}"
              with_items:
                - { key: name, value: QLMTDEVSSN }
                - { key: actual, value: "{{ qlmtdevssn.sysval[0]['value'] }}" }
                - { key: compliant, value: false }
              when: qlmtdevssn.rc == 0 and qlmtdevssn.sysval[0]['value'] == "0"
            - name: Set report
              ansible.builtin.set_fact:
                report: "{{ report|default([]) + [qlmtdevssn_result] }}"

        - name: Block for checking QUSEADPAUT
          block:
            - name: Checking particular system values - QUSEADPAUT
              ibm.power_ibmi.ibmi_sysval:
                sysvalue:
                  - { name: QUSEADPAUT }
              register: quseadpaut
              ignore_errors: true
            - name: Set quseadpaut_result when not *NONE value
              ansible.builtin.set_fact:
                quseadpaut_result: "{{ quseadpaut_result | default({}) | combine ({ item.key : item.value }) }}"
              with_items:
                - { key: name, value: QUSEADPAUT }
                - { key: actual, value: "{{ quseadpaut.sysval[0]['value'] }}" }
                - { key: compliant, value: true }
              when: quseadpaut.rc == 0 and quseadpaut.sysval[0]['value'] != "*NONE"
            - name: Set quseadpaut_result when *NONE value
              ansible.builtin.set_fact:
                quseadpaut_result: "{{ quseadpaut_result | default({}) | combine ({ item.key : item.value }) }}"
              with_items:
                - { key: name, value: QUSEADPAUT }
                - { key: actual, value: "{{ quseadpaut.sysval[0]['value'] }}" }
                - { key: compliant, value: false }
              when: quseadpaut.rc == 0 and quseadpaut.sysval[0]['value'] == "*NONE"
            - name: Set report
              ansible.builtin.set_fact:
                report: "{{ report|default([]) + [quseadpaut_result] }}"

        - name: Block for checking QSYSLIBL
          block:
            - name: Checking particular system values - QSYSLIBL
              ibm.power_ibmi.ibmi_sysval:
                sysvalue:
                  - { name: QSYSLIBL }
              register: qsyslibl
              ignore_errors: true

            - name: Check each library in QSYSLIBL to see if *PUBLIC authority is set to *USE
              ibm.power_ibmi.ibmi_sql_query:
                sql: SELECT * FROM QSYS2.OBJECT_PRIVILEGES WHERE SYSTEM_OBJECT_NAME = '{{item}}' AND SYSTEM_OBJECT_SCHEMA = 'QSYS'
                  AND OBJECT_TYPE = '*LIB' AND AUTHORIZATION_NAME = '*PUBLIC' AND OBJECT_AUTHORITY = '*USE'
              register: sql
              with_items:
                - "{{ qsyslibl.sysval[0]['value'].split(' ') }}"
              when: item != ""
              failed_when: sql.row_count == 0
            - name: Set qsyslibl_result
              ansible.builtin.set_fact:
                qsyslibl_result: "{{ qsyslibl_result | default({}) | combine ({ item.key : item.value }) }}"
              with_items:
                - { key: name, value: QSYSLIBL }
                - { key: actual, value: "{{ qsyslibl.sysval[0]['value'] }}" }
                - { key: compliant, value: true }
          rescue:
            - name: Set qsyslibl_result
              ansible.builtin.set_fact:
                qsyslibl_result: "{{ qsyslibl_result | default({}) | combine ({ item.key : item.value }) }}"
              with_items:
                - { key: name, value: QSYSLIBL }
                - { key: actual, value: "{{ qsyslibl.sysval[0]['value'] }}" }
                - { key: compliant, value: false }

        - name: Set report
          ansible.builtin.set_fact:
            report: "{{ report|default([]) + [qsyslibl_result] }}"

        - name: Generate report to file
          ansible.builtin.copy:
            content: "{{ report | to_nice_json(sort_keys=False) }}"
            dest: "{{ check_result_file }}"
            mode: "0644"

        - name: Check completes
          ansible.builtin.debug:
            msg: Security check report generated successfully, please review at {{ check_result_file }}

    - name: Meta end_play
      ansible.builtin.meta: end_play
      when: mode == 'A'

    - name: Block for mode != 'A'
      when: mode != 'A'
      block:
        - name: Block for mode == 'B'
          when: mode == 'B'
          block:
            - name: Prompt for check result file
              ansible.builtin.pause:
                prompt: |
                  You're going to remediate the vulnerables base on the check.
                  Please input the path to the system value check result file.
              register: report_file

            - name: Stat report file
              ansible.builtin.stat:
                path: "{{ report_file.user_input }}"
              register: file

            - name: Note when report file does not exist
              ansible.builtin.fail:
                msg: Report file does not exist - {{ report_file.user_input }}
              when: not file.stat.exists

            - name: Display the JSON file content
              ansible.builtin.command: cat {{ report_file.user_input }}
              register: result
              changed_when: false

            - name: Save the Json data to a Variable as a Fact
              ansible.builtin.set_fact:
                report: "{{ result.stdout | from_json }}"

        - name: Check for system values remediation
          ansible.builtin.include_tasks: system_value_remediation.yml
          loop: "{{ report }}"
          loop_control:
            loop_var: check_item

        - name: Please review remediation result
          ansible.builtin.debug:
            msg:
              - ↓↓↓↓↓↓ Success list ↓↓↓↓↓↓
              - "{{ success_list }}"
              - ↓↓↓↓↓↓ Fail list ↓↓↓↓↓↓
              - "{{ fail_list }}"
              - ↓↓↓↓↓↓ Skip list ↓↓↓↓↓↓
              - "{{ skip_list }}"
