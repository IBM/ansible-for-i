---
- name: Set compliant
  ansible.builtin.set_fact:
    compliant: "{{ check_item.compliant }}"
- name: Block for when not compliant
  when: not compliant
  block:
    - name: Block for various system values
      when: check_item.name != "QLMTDEVSSN" and check_item.name != "QAUTOVRT" and check_item.name != "QSYSLIBL" and check_item.name != "QUSEADPAUT"
        and check_item.name != "QAUTOCFG" and check_item.name != "QPWDRQDDIF"
      block:
        - name: Prompt for system value
          ansible.builtin.pause:
            prompt: |
              Do you want to change system value {{ check_item.name }} on {{ ansible_ssh_host }} (Y/N)?
              Expected value: {{ check_item.expect }} | Actual value: {{ check_item.actual }}
          register: user_choice

        - name: Set user_choice_mode
          ansible.builtin.set_fact:
            user_choice_mode: "{{ user_choice.user_input | upper | trim }}"

        - name: Block for when user_choice_mode == 'Y'
          when: user_choice_mode == 'Y'
          block:
            - name: Remediating check_item.name on {{ ansible_ssh_host }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: CHGSYSVAL SYSVAL({{ check_item.name }}) VALUE('{{ check_item.expect }}')
                become_user: "{{ become_user_name }}"
                become_user_password: "{{ become_user_password }}"
              register: remediate
              failed_when: false # We want to continue regardless of rc

            - name: Block for when remediate.rc == 0
              when: remediate.rc == 0
              block:
                - name: Print check_item name
                  ansible.builtin.debug:
                    msg: |
                      {{ check_item.name }} Remediation completes, you can re-run check only mode to see the change.
                - name: Set success_list
                  ansible.builtin.set_fact:
                    success_list: "{{ success_list + [ check_item.name ] }}"

            - name: Block for when remediate.rc != 0
              when: remediate.rc != 0
              block:
                - name: Print check_item name
                  ansible.builtin.debug:
                    msg: |
                      {{ check_item.name }} Remediation failed.
                - name: Print fail_list
                  ansible.builtin.set_fact:
                    fail_list: "{{ fail_list + [ check_item.name ] }}"

        - name: Block for when user_choice_mode != 'Y'
          when: user_choice_mode != 'Y'
          block:
            - name: User cancelled"
              ansible.builtin.debug:
                msg: User cancelled
            - name: Print skip_list
              ansible.builtin.set_fact:
                skip_list: "{{ skip_list + [ check_item.name ] }}"

    - name: Block for when name == "QAUTOVRT"
      when: check_item.name == "QAUTOVRT"
      block:
        - name: Prompt for QAUTOVRT input
          ansible.builtin.pause:
            prompt: |
              Determines whether automatic device creation is allowed and if so, how many devices can
              be configured automatically. Specify a value 1 through 32500 for this system value and is
              both sufficient to support the needs of the business and not too large to represent a denial
              of service exposure since it represents a finite limit. Setting the value to *NOMAX is a
              security risk as an infinite number of virtual devices may lead to a denial of service if disk
              capacity is reached. The value should be sufficient enough that enough devices are allocated to
              support the business. Input a number between 1 and 32500. Leave blank and press Enter to skip.
          register: qautovrt_user

        - name: Block for user_input | length > 0
          when: qautovrt_user.user_input | length > 0
          block:
            - name: Changing QAUTOVRT to {{ qautovrt_user.user_input | int }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: CHGSYSVAL SYSVAL(QAUTOVRT) VALUE({{ qautovrt_user.user_input | int }})
                become_user: "{{ become_user_name }}"
                become_user_password: "{{ become_user_password }}"
              register: remediate
              failed_when: false # We want to continue regardless of rc

            - name: Block for remediate.rc == 0
              when: remediate.rc == 0
              block:
                - name: Debug message
                  ansible.builtin.debug:
                    msg: |
                      QAUTOVRT Remediation completes, you can re-run check only mode to see the change.
                - name: Set success_list
                  ansible.builtin.set_fact:
                    success_list: "{{ success_list + [ 'QAUTOVRT' ] }}"

            - name: Block for remediate.rc != 0
              when: remediate.rc != 0
              block:
                - name: Failure message
                  ansible.builtin.debug:
                    msg: |
                      QAUTOVRT Remediation failed.
                - name: Set fail_list
                  ansible.builtin.set_fact:
                    fail_list: "{{ fail_list + [ 'QAUTOVRT' ] }}"

        - name: Block for user_input | length == 0
          when: qautovrt_user.user_input | length == 0
          block:
            - name: User cancel message
              ansible.builtin.debug:
                msg: User cancelled
            - name: Set skip_list
              ansible.builtin.set_fact:
                skip_list: "{{ skip_list + [ 'QAUTOVRT' ] }}"

    - name: Case name == "QLMTDEVSSN"
      when: check_item.name == "QLMTDEVSSN"
      block:
        - name: Prompt for QLMTDEVSSN input
          ansible.builtin.pause:
            prompt: |
              QLMTDEVSSN specifies if users can have concurrent device sessions.
              How many concurrent device sessions do you want to have in the system?
              For Level 1, the suggestied value can be a non-zero number between 1-9.
              For Level 2 and Level 3, the suggestied value is 1.
              QLMTDEVSSN's current value: {{ check_item.actual }}
              Do you want to change system value {{ check_item.name }} on {{ ansible_ssh_host }}?
              Input a number between 1-9. Leave blank and press Enter to skip.
          register: qlmtdevssn_user

        - name: Block when user_input
          when: qlmtdevssn_user.user_input | trim | length > 0
          block:
            - name: Changing QLMTDEVSSN to {{ qlmtdevssn_user.user_input | trim | int }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: CHGSYSVAL SYSVAL(QLMTDEVSSN) VALUE('{{ qlmtdevssn_user.user_input | trim | int }}')
                become_user: "{{ become_user_name }}"
                become_user_password: "{{ become_user_password }}"
              register: remediate
              failed_when: false # We want to continue regardless of rc

            - name: Block for when rc == 0
              when: remediate.rc == 0
              block:
                - name: Debug message
                  ansible.builtin.debug:
                    msg: |
                      QLMTDEVSSN Remediation completes, you can re-run check only mode to see the change.
                - name: Set success_list
                  ansible.builtin.set_fact:
                    success_list: "{{ success_list + [ 'QLMTDEVSSN' ] }}"

            - name: Block when rc != 0
              when: remediate.rc != 0
              block:
                - name: Failure message
                  ansible.builtin.debug:
                    msg: |
                      QLMTDEVSSN Remediation failed.
                - name: Set fail_list
                  ansible.builtin.set_fact:
                    fail_list: "{{ fail_list + [ 'QLMTDEVSSN' ] }}"

        - name: Block for user cancel
          when: qlmtdevssn_user.user_input | trim | length == 0
          block:
            - name: User cancel message
              ansible.builtin.debug:
                msg: User cancelled
            - name: Display skip_list
              ansible.builtin.set_fact:
                skip_list: "{{ skip_list + [ 'QLMTDEVSSN' ] }}"

    - name: Block for name == "QUSEADPAUT"
      when: check_item.name == "QUSEADPAUT"
      block:
        - name: Prompt for QUSEADPAUT input
          ansible.builtin.pause:
            prompt: |
              Controls those users allowed to create or change programs that use adopted authority from
              other programs that call it. If an authorization list is specified, *PUBLIC(EXCLUDE) should
              be used. Specific access granted for those users that are allowed to create or change
              programs that adopt authority should be limited to system administrator personnel and
              change control personnel responsible for disaster recovery and program change control
              respectively. Do you want to remediate by creating an authorization list named QUSEADPAUT and
              change the system value QUSEADPAUT to QUSEADPAUT? (Y/N)
          register: quseadpaut_user
        - name: Set user mode
          ansible.builtin.set_fact:
            quseadpaut_user_mode: "{{ quseadpaut_user.user_input | upper | trim }}"

        - name: Block for when quseadpaut_user_mode == 'Y'
          when: quseadpaut_user_mode == 'Y'
          block:
            - name: Create a cl command file on {{ ansible_ssh_host }}
              ansible.builtin.copy:
                dest: /tmp/create_QUSEADPAUT.cl
                content: |
                  CRTAUTL AUTL(QUSEADPAUT) AUT(*EXCLUDE)

                  CHGOBJOWN OBJ(QUSEADPAUT) OBJTYPE(*AUTL) NEWOWN(QSYS)

                  CHGSYSVAL SYSVAL(QUSEADPAUT) VALUE(QUSEADPAUT)
                force: true
                mode: "0755"
              failed_when: false # We want to continue

            - name: Execute the command file to remediate
              ibm.power_ibmi.ibmi_script_execute:
                src: /tmp/create_QUSEADPAUT.cl
                type: CL
                become_user: "{{ become_user_name }}"
                become_user_password: "{{ become_user_password }}"
              register: remediate
              failed_when: false # We want to continue regardless of rc

            - name: Block when emediate.rc == 0
              when: remediate.rc == 0
              block:
                - name: Completion message
                  ansible.builtin.debug:
                    msg: |
                      QUSEADPAUT Remediation completes, you can re-run check only mode to see the change.
                - name: Display success_list
                  ansible.builtin.set_fact:
                    success_list: "{{ success_list + [ 'QUSEADPAUT' ] }}"

            - name: Block when remediate.rc != 0
              when: remediate.rc != 0
              block:
                - name: Failure message
                  ansible.builtin.debug:
                    msg: |
                      QUSEADPAUT Remediation failed.
                - name: Display fail_list
                  ansible.builtin.set_fact:
                    fail_list: "{{ fail_list + [ 'QUSEADPAUT' ] }}"

        - name: Block when quseadpaut_user_mode == 'N' or quseadpaut_user_mode | length == 0
          when: quseadpaut_user_mode == 'N' or quseadpaut_user_mode | length == 0
          block:
            - name: User cancel message
              ansible.builtin.debug:
                msg: User cancelled
            - name: Set skip_list
              ansible.builtin.set_fact:
                skip_list: "{{ skip_list + [ 'QUSEADPAUT' ] }}"

    - name: Block when check_item.name == "QSYSLIBL"
      when: check_item.name == "QSYSLIBL"
      block:
        - name: Prompt for authority
          ansible.builtin.pause:
            prompt: |
              The security of the System Library List is a vital part of your overall system security. All
              libraries in the System Library List should provide *PUBLIC *USE authority. Any authority
              greater than *USE to any library in the System Library List can allow the introduction of
              trojans and malicious code into your system that will be searched before any other
              libraries in the library list of a job.

              Do you want to remediate to ensure each library in the list grants *PUBLIC *USE Object Authority and that
              any additional Users with an authority greater than *USE are properly authorized by
              the business to introduce changes into the library? (Y/N)
          register: qsyslib_user
        - name: Set qsyslib_user_mode
          ansible.builtin.set_fact:
            qsyslib_user_mode: "{{ qsyslib_user.user_input | upper | trim }}"
        - name: Block when qsyslib_user_mode == 'Y'
          when: qsyslib_user_mode == 'Y'
          block:
            - name: Grant *PUBLIC *USE Object Authority to each library in QSYSLIBL
              ibm.power_ibmi.ibmi_cl_command:
                cmd: GRTOBJAUT OBJ({{ item }}) OBJTYPE(*LIB) USER(*PUBLIC) AUT(*USE) REPLACE(*YES)
                become_user: "{{ become_user_name }}"
                become_user_password: "{{ become_user_password }}"
              register: remediate
              with_items:
                - "{{ check_item.actual.split(' ') }}"
              when: item != ""

            - name: Remediation completes
              ansible.builtin.debug:
                msg: |
                  QSYSLIBL Remediation completes, you can re-run check only mode to see the change.

            - name: Set success_list
              ansible.builtin.set_fact:
                success_list: "{{ success_list + [ 'QSYSLIBL' ] }}"

          rescue:
            - name: Failure message
              ansible.builtin.debug:
                msg: |
                  QSYSLIBL Remediation failed.
            - name: Set fail_list
              ansible.builtin.set_fact:
                fail_list: "{{ fail_list + [ 'QSYSLIBL' ] }}"

        - name: Block when qsyslib_user_mode == 'N' or qsyslib_user_mode | length == 0
          when: qsyslib_user_mode == 'N' or qsyslib_user_mode | length == 0
          block:
            - name: Cancel message
              ansible.builtin.debug:
                msg: User cancelled
            - name: Set skip_list
              ansible.builtin.set_fact:
                skip_list: "{{ skip_list + [ 'QSYSLIBL' ] }}"

    - name: Block when check_item.name == "QAUTOCFG"
      when: check_item.name == "QAUTOCFG"
      block:
        - name: Prompt for qautocfg_choice
          ansible.builtin.pause:
            prompt: |
              In order to make sure that the IBM i stock images can be successfully deployed, QAUTOCFG could not be
              changed to the recommended value during the deployment. The customer can change it after deployment.
              Do you still want to change system value QAUTOCFG on {{ ansible_ssh_host }} (Y/N)?
              Expected value: {{ check_item.expect }} | Actual value: {{ check_item.actual }}
          register: qautocfg_choice

        - name: Set choice mode
          ansible.builtin.set_fact:
            qautocfg_choice_mode: "{{ qautocfg_choice.user_input | upper | trim }}"

        - name: Block when qautocfg_choice_mode == 'Y'
          when: qautocfg_choice_mode == 'Y'
          block:
            - name: Remediating check_item.name on {{ ansible_ssh_host }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: CHGSYSVAL SYSVAL({{ check_item.name }}) VALUE('{{ check_item.expect }}')
                become_user: "{{ become_user_name }}"
                become_user_password: "{{ become_user_password }}"
              register: remediate
              failed_when: false # We want to continue regardless of rc

            - name: Block when remediate.rc == 0
              when: remediate.rc == 0
              block:
                - name: Completion
                  ansible.builtin.debug:
                    msg: |
                      {{ check_item.name }} Remediation completes, you can re-run check only mode to see the change.
                - name: Set success_list
                  ansible.builtin.set_fact:
                    success_list: "{{ success_list + [ check_item.name ] }}"

            - name: Block when remediate.rc != 0
              when: remediate.rc != 0
              block:
                - name: Failure message
                  ansible.builtin.debug:
                    msg: |
                      {{ check_item.name }} Remediation failed.
                - name: Set fail_list
                  ansible.builtin.set_fact:
                    fail_list: "{{ fail_list + [ check_item.name ] }}"

        - name: Block when qautocfg_choice_mode != 'N' or qautocfg_choice_mode | length == 0
          when: qautocfg_choice_mode != 'N' or qautocfg_choice_mode | length == 0
          block:
            - name: Cancel message
              ansible.builtin.debug:
                msg: User cancelled
            - name: Set skip_list
              ansible.builtin.set_fact:
                skip_list: "{{ skip_list + [ check_item.name ] }}"

    - name: Block when check_item.name == "QPWDRQDDIF"
      when: check_item.name == "QPWDRQDDIF"
      block:
        - name: Prompt for QPWDRQDDIF choice
          ansible.builtin.pause:
            prompt: |
              In order to make sure that the IBM i stock images can be successfully deployed, QPWDRQDDIF could not be
              changed to the recommended value during the deployment. The customer can change it after deployment.
              Do you still want to change system value QPWDRQDDIF on {{ ansible_ssh_host }} (Y/N)?
              Expected value: {{ check_item.expect }} | Actual value: {{ check_item.actual }}
          register: qpwdrqddif_choice

        - name: Set choice mode
          ansible.builtin.set_fact:
            qpwdrqddif_choice_mode: "{{ qpwdrqddif_choice.user_input | upper | trim }}"

        - name: Block for when qpwdrqddif_choice_mode == 'Y'
          when: qpwdrqddif_choice_mode == 'Y'
          block:
            - name: Remediating check_item.name on {{ ansible_ssh_host }}
              ibm.power_ibmi.ibmi_cl_command:
                cmd: CHGSYSVAL SYSVAL({{ check_item.name }}) VALUE('{{ check_item.expect }}')
                become_user: "{{ become_user_name }}"
                become_user_password: "{{ become_user_password }}"
              register: remediate
              failed_when: false # We want to continue regardless of rc

            - name: Block for when remediate.rc == 0
              when: remediate.rc == 0
              block:
                - name: Completion
                  ansible.builtin.debug:
                    msg: |
                      {{ check_item.name }} Remediation completes, you can re-run check only mode to see the change.
                - name: Set success_list
                  ansible.builtin.set_fact:
                    success_list: "{{ success_list + [ check_item.name ] }}"

            - name: Block for when remediate.rc != 0
              when: remediate.rc != 0
              block:
                - name: Failure message
                  ansible.builtin.debug:
                    msg: |
                      {{ check_item.name }} Remediation failed.
                - name: Set fail_list
                  ansible.builtin.set_fact:
                    fail_list: "{{ fail_list + [ check_item.name ] }}"

        - name: Block for when qpwdrqddif_choice_mode != 'N' or qpwdrqddif_choice_mode | length == 0
          when: qpwdrqddif_choice_mode != 'N' or qpwdrqddif_choice_mode | length == 0
          block:
            - name: Cancel message
              ansible.builtin.debug:
                msg: User cancelled
            - name: Set skip_list
              ansible.builtin.set_fact:
                skip_list: "{{ skip_list + [ check_item.name ] }}"
