# Copyright (c) IBM Corporation 2019, 2020
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

# Description:
  # This playbook is used for 1st level solution. It will get the PTF group information in catalog. Then call sync_apply_ptf_group role
  # to transfer the PTF group files to the target system, and apply.

# Parameters:
  # repo_server -- The IBM i/Linux server stores PTFs and PTF groups. 
  # target_system -- The target IBM i server that receives and applies the PTF group.
  # ptf_group -- Specifies the PTF Group number which needs to be applied on target IBM i system. The input group level can be omitted. If level is omitted, the latest downloaded PTF group will be used.
  # image_root -- Specifies the image files' dir on the repo_server. This should be the root dir of all the image files. 
  # delete -- Specifies whether or not to delete the file install dir on target server after apply. The default value is true.
  # ptf_omit_list -- The list of PTFs which will be omitted. The elements of the list are dict. The key of the dict should be the product ID of the fix that is omitted.

# Command example: 
  # ansible-playbook ./sync_apply_ptf_group_lv1.yml -e "{'target_system': 'systemA', 'repo_server': 'reposerver', 'ptf_group':
# {'group':'SF99876', 'level': 19}, 'image_root': '/home/test/PTF', 'delete': true, 'ptf_omit_list': [{'5770SS1': 'SI78582'}, {'5770ss1': 'SI78544'}]}"

---
- name: Transfer PTF group files from repo server to target system, and apply
  hosts: '{{ target_system }}'
  gather_facts: false
  collections:
    - ibm.power_ibmi

  vars:
    repo_server: "{{ repo_server }}"

  tasks:
    - name: Refresh PTF DB information in catalog
      ibmi_fix_repo_lv1:
        image_root: "{{ image_root }}"
        action: "refresh"
      delegate_to: "{{ repo_server }}"
      register: fix_repo_refresh_result

    - name: Print the PTF group refresh result
      debug:
        var: fix_repo_refresh_result

    - name: Get the PTF group information in catalog
      ibmi_fix_repo_lv1:
        image_root: "{{ image_root }}"
        checksum: true
        action: "find"
        fields:
          - 'image_path'
          - 'image_files'
          - 'download_date'
          - 'ordered_ptf'
        additional_sql: 'ORDER BY download_date DESC, ordered_ptf_count'
        parameters: "{{ ptf_group }}"
      delegate_to: "{{ repo_server }}"
      register: fix_repo_find_result

    - name: Print the PTF group information
      debug:
        var: fix_repo_find_result

    - block:
        - name: PTF group information is not in catalog
          fail:
            msg: "PTF group information is not in catalog, quit."
      when: fix_repo_find_result.success_list[0].query_result is not defined or fix_repo_find_result.success_list[0].query_result == []

    - name: Compose files name list
      set_fact:
        files_name_list: "{{ files_name_list | default( [] ) + [image_files_var.file] }}"
      loop: "{{ fix_repo_find_result.success_list[0].query_result[0].image_files }}"
      loop_control:
        loop_var: image_files_var

    - name: Print files_name_list
      debug:
        var: files_name_list

    - name: Compose apply list
      set_fact:
        ptf_group_information: "{{ {'file_path': fix_repo_find_result.success_list[0].query_result[0].image_path, 'file_name': files_name_list} }}"

    - name: Print ptf_group_information
      debug:
        var: ptf_group_information

    - name: Include sync_apply_ptf_group role to transfer PTF group files to target ibm i, and apply
      include_role:
        name: sync_apply_ptf_group
      vars:
        ptf_group_info: "{{ ptf_group_information }}"
        src_host: "{{ repo_server }}"
