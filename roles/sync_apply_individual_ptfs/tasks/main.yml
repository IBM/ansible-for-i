---
# Role for sync_apply_individual_ptfs
- name: Initialize sync_list
  ansible.builtin.set_fact:
    sync_list: []
    coverletter_list: []

- name: Compose sync list and coverletter_list
  ansible.builtin.set_fact:
    sync_list: "{{ sync_list|default([]) + [ not_loaded_list_var | combine( {'src': not_loaded_list_var.file_path} )] }}"
    coverletter_list: "{{ coverletter_list|default([]) + [ not_loaded_list_var | combine( {'src': '/qsys.lib/qgpl.lib/qapzcover.file/Q'
    + not_loaded_list_var.ptf_id + '.mbr'} )] }}"
  loop: "{{ not_loaded_list }}"
  loop_control:
    loop_var: not_loaded_list_var

- name: Transfer PTF savfs to target ibm i system
  ibm.power_ibmi.ibmi_synchronize_files:
    dest: "{{ dest }}"
    src_list: "{{ sync_list }}"
  when: sync_list != []
  delegate_to: "{{ src_host }}"
  ignore_errors: true
  register: sync_result

- name: Transfer PTFs' cover letter to target ibm i system
  ibm.power_ibmi.ibmi_synchronize_files:
    dest: "/qsys.lib/qgpl.lib/qapzcover.file"
    src_list: "{{ coverletter_list }}"
  when: coverletter_list != []
  delegate_to: "{{ src_host }}"
  ignore_errors: true
  register: sync_coverletter_result

- name: Compose sync result list
  ansible.builtin.set_fact:
    sync_success_list: "{{ sync_result.success_list | default([]) }}"
    sync_fail_list: "{{ sync_result.fail_list | default([]) }}"
    sync_coverletter_success_list: "{{ sync_coverletter_result.success_list | default([]) }}"
    sync_coverletter_fail_list: "{{ sync_coverletter_result.fail_list | default([]) }}"

- name: Print the list of successful sync
  ansible.builtin.debug:
    var: sync_success_list

- name: Print the list of failed sync
  ansible.builtin.debug:
    var: sync_fail_list

- name: Print the list of successful coverletter sync
  ansible.builtin.debug:
    var: sync_coverletter_success_list

- name: Print the list of failed coverletter sync
  ansible.builtin.debug:
    var: sync_coverletter_fail_list

- name: Include load_apply_ptfs role to load and apply ptfs
  ansible.builtin.include_role:
    name: load_apply_ptfs
  vars:
    to_be_loaded_ptf_list: "{{ sync_success_list }}"
    remote_lib: "{{ (dest | basename | splitext)[0] }}"
    loaded_list: "{{ already_loaded_list }}"
  when: sync_success_list != [] or already_loaded_list != []

- name: Perform clean up actions
  when: delete and sync_success_list != []
  block:
    - name: Compose dest file path
      ansible.builtin.set_fact:
        dest_file_list: "{{ dest_file_list | default([]) + [ sync_success_list_var.file_path ] }}"
      loop: "{{ sync_success_list }}"
      loop_control:
        loop_var: sync_success_list_var

    - name: Print the list of dest file path
      ansible.builtin.debug:
        var: dest_file_list

    - name: Delete the dest file dir
      ansible.builtin.file:
        path: "{{ dest_file_list_var }}"
        state: absent
      loop: "{{ dest_file_list }}"
      loop_control:
        loop_var: dest_file_list_var
