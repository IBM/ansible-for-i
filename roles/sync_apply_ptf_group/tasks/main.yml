---
# Role for sync_apply_ptf_group
# Call ibm.power_ibmi.ibmi_synchronize_files to tranfer the existing PTF group files to an ibm i system, then call ibm.power_ibmi.ibmi_fix_imgclg to apply this
# PTF group and return the result.
- name: Initialize src_list and sync_apply_fail
  ansible.builtin.set_fact:
    src_list: []
    sync_apply_fail: false

- name: Compose target tmp dir str
  ansible.builtin.set_fact:
    path: "{{ dest }}/{{ ptf_group_info.file_path | basename }}"

- name: Check if the folder is already exists
  ansible.builtin.stat:
    path: "{{ path }}"
  register: stat_result
  ignore_errors: true

- name: Include check_file role to check if files are the same
  ansible.builtin.include_role:
    name: check_file
  vars:
    target_file_path: "{{ path }}"
    repo_file_path: "{{ ptf_group_info.file_path }}"
    repo_server: "{{ src_host }}"
  when: stat_result.stat.exists

- name: Set up and transfer images
  when: (same_files is defined and not same_files) or not stat_result.stat.exists
  block:
    - name: Clear receive dir
      ansible.builtin.file:
        path: "{{ path }}"
        state: absent
      register: clear_result
      ignore_errors: true

    - name: Make receive dir
      ansible.builtin.file:
        path: "{{ path }}"
        state: directory
        mode: '0755'
      register: file_result
      ignore_errors: true

    - name: Failure handling for receive dir
      when: file_result.failed == 1
      block:
        - name: Skip when make receive dir fail
          ansible.builtin.debug:
            msg: "{{ 'Make receive dir ' + path + ' fail, skip the rest of this role.' }}"

        - name: Initialize sync_apply_fail
          ansible.builtin.set_fact:
            sync_apply_fail: true

    - name: Transfer images
      block:
        - name: Recursively find files on source host / repo server
          ansible.builtin.find:
            paths: "{{ ptf_group_info.file_path }}"
            recurse: true
          delegate_to: "{{ src_host }}"
          register: find_result_repo

        - name: Compose src_list
          ansible.builtin.set_fact:
            src_list: "{{ src_list | default([]) + [{ 'src': find_result_repo_var.path }] }}"
          loop: "{{ find_result_repo.files }}"
          loop_control:
            loop_var: find_result_repo_var

        - name: Debug src_list
          ansible.builtin.debug:
            var: src_list

        - name: Transfer image to target_system
          ibm.power_ibmi.ibmi_synchronize_files:
            dest: "{{ path }}"
            src_list: "{{ src_list }}"
          delegate_to: "{{ src_host }}"
          register: sync_result

        # - name: Print transfer
        #   ansible.builtin.debug:
        #     var: sync_result

        - name: Sync failure handling
          when: sync_result.fail_list != []
          block:
            - name: Skip when transfer failed
              ansible.builtin.debug:
                msg: "One or more ptf group file transfer failed, quit apply ptf group action."

            - name: Set sync_apply_fail
              ansible.builtin.set_fact:
                sync_apply_fail: true

- name: Apply PTFs
  when: not sync_apply_fail
  block:
    - name: Get the home dir on target server
      ansible.builtin.shell: 'echo $HOME'
      register: home_dir
      changed_when: home_dir == ''

    - name: Compose path
      ansible.builtin.set_fact:
        path: "{{ path | regex_replace('~', home_dir.stdout) }}"
      when: path | regex_search("^~")

    # - name: Debug path
    #   ansible.builtin.debug:
    #     var: path

    - name: Apply PTF group
      ibm.power_ibmi.ibmi_fix_imgclg:
        src: '{{ path }}'
        fix_omit_list: '{{ ptf_omit_list | default([]) }}'
        apply_type: '{{ apply_type }}'
        rollback: true
      register: apply_result

    - name: Print apply result
      ansible.builtin.debug:
        var: apply_result

- name: Delete the dest file dir
  ansible.builtin.file:
    path: "{{ path }}"
    state: absent
  when: delete
