---
# Tasks file for check_ptf
- name: Init varibles
  ansible.builtin.set_fact:
    ptfs: []
    ptfs_status: {}
    checked_ptf: {}
    ptfs_info: []
    not_loaded_ptfs_list: []
    loaded_ptfs_list: []
    to_be_loadednumber: []
    loaded: []
    compose_list: []
    temporarily_applied_list: []
    temporarily_applied: []

- name: Compose ptf list and ptfs status dict
  ansible.builtin.set_fact:
    ptfs: "{{ ptfs | default([]) + [check_ptf_list_var.ptf_id] }}"
    ptfs_status: "{{ ptfs_status | default({}) | combine({check_ptf_list_var.ptf_id: 'NON-EXISTENT'}) }}"
  loop: '{{ check_ptf_list }}'
  loop_control:
    loop_var: check_ptf_list_var

- name: Print check_ptf_list
  ansible.builtin.debug:
    var: check_ptf_list

- name: Print ptf number list to-be-checked
  ansible.builtin.debug:
    msg: 'ptf numbers to be checked: {{ ptfs }}'

- name: Query the status of the request ptf
  ibm.power_ibmi.ibmi_fix:
    fix_list: '{{ ptfs }}'
    operation: 'query'
  register: check

- name: Compose check result dict
  ansible.builtin.set_fact:
    ptfs_info: "{{ check.ptf_list }}"

# - name: Print ptfs_info
#   ansible.builtin.debug:
#     var: ptfs_info

- name: Compose ptfs status dict
  ansible.builtin.set_fact:
    checked_ptf: "{{ checked_ptf | default({}) | combine({ptfs_info_var.PTF_IDENTIFIER: ptfs_info_var.PTF_LOADED_STATUS}) }}"
  loop: '{{ ptfs_info | list }}'
  loop_control:
    loop_var: ptfs_info_var

# - name: Print checked_ptf
#   ansible.builtin.debug:
#     var: checked_ptf

- name: Combine the query result and unknown ptf
  ansible.builtin.set_fact:
    ptfs_status: "{{ ptfs_status | default({}) | combine(checked_ptf | default({})) }}"

- name: Compose to_be_loadednumber
  ansible.builtin.set_fact:
    to_be_loadednumber: "{{ to_be_loadednumber | default([]) + [ptf_status.key] }}"
  when: ptf_status.value == 'NON-EXISTENT' or ptf_status.value == 'PERMANENTLY REMOVED' or ptf_status.value == 'NOT LOADED'
  with_dict: "{{ ptfs_status }}"
  loop_control:
    loop_var: ptf_status

- name: Compose temporarily_applied
  ansible.builtin.set_fact:
    temporarily_applied: "{{ temporarily_applied | default([]) + [ptf_status.key] }}"
  when: ptf_status.value == 'APPLIED'
  with_dict: "{{ ptfs_status }}"
  loop_control:
    loop_var: ptf_status

- name: Compose loaded
  ansible.builtin.set_fact:
    loaded: "{{ loaded | default([]) + [ptf_status.key] }}"
  when: ptf_status.value == 'LOADED'
  with_dict: "{{ ptfs_status }}"
  loop_control:
    loop_var: ptf_status

# - name: Print loaded
#   ansible.builtin.debug:
#     var: loaded

# - name: Print to_be_loadednumber
#   ansible.builtin.debug:
#     var: to_be_loadednumber

- name: Compose compose_list
  ansible.builtin.set_fact:
    compose_list: []

- name: Compose to_be_loaded
  ansible.builtin.include_tasks: find_ptfinfo.yml
  with_list: "{{ to_be_loadednumber }}"
  loop_control:
    loop_var: ptf_id

- name: Set to_be_loaded
  ansible.builtin.set_fact:
    to_be_loaded: "{{ compose_list }}"

#  -name: Print to_be_loaded
#   ansible.builtin.debug:
#     var: to_be_loaded

- name: Call ibm.power_ibmi.ibmi_fix_product_check to filter uninstalled product
  ibm.power_ibmi.ibmi_fix_product_check:
    ptfs: '{{ to_be_loaded }}'
  register: fix_product_check_result
  when: to_be_loaded != [] and check_product

- name: Compose not_loaded_ptfs_list and product_not_installed_ptfs
  ansible.builtin.set_fact:
    not_loaded_ptfs_list: "{{ fix_product_check_result.ptfs_with_product_installed | default([]) }}"
    product_not_installed_ptfs: "{{ fix_product_check_result.ptfs_without_product_installed | default([]) }}"

- name: Compose compose_list
  ansible.builtin.set_fact:
    compose_list: []

- name: Compose loaded_ptfs_list
  ansible.builtin.include_tasks: find_ptfinfo.yml
  with_list: "{{ loaded }}"
  loop_control:
    loop_var: ptf_id

- name: Compose loaded_ptfs_list
  ansible.builtin.set_fact:
    loaded_ptfs_list: "{{ compose_list }}"
  when: loaded != []

- name: Compose temporarily_applied_list
  ansible.builtin.include_tasks: find_ptfinfo.yml
  with_list: "{{ temporarily_applied }}"
  loop_control:
    loop_var: ptf_id

- name: Compose temporarily_applied_list
  ansible.builtin.set_fact:
    temporarily_applied_list: "{{ compose_list }}"
  when: temporarily_applied != []

- name: Compose ptfs_status
  ansible.builtin.set_fact:
    ptfs_status: "{{ ptfs_status | default({}) | combine({ptf_status.ptf_id: 'PRODUCT_NOT_INSTALLED'}) }}"
  with_list: "{{ product_not_installed_ptfs }}"
  loop_control:
    loop_var: ptf_status
  when: product_not_installed_ptfs != []

- name: Compose ptfs_info
  ansible.builtin.set_fact:
    ptfs_info: "{{ ptfs_info + [{'PTF_IDENTIFIER': ptf_status.key, 'PTF_LOADED_STATUS': ptf_status.value}] }}"
  when: ptf_status.value == 'NON-EXISTENT' or ptf_status.value == 'PRODUCT_NOT_INSTALLED'
  with_dict: "{{ ptfs_status }}"
  loop_control:
    loop_var: ptf_status

- name: Print not loaded ptfs list
  ansible.builtin.debug:
    var: not_loaded_ptfs_list

- name: Print product_not_installed_ptfs
  ansible.builtin.debug:
    var: product_not_installed_ptfs

- name: Print already loaded ptfs list
  ansible.builtin.debug:
    var: loaded_ptfs_list

- name: Print Temporarily applied ptfs list
  ansible.builtin.debug:
    var: temporarily_applied_list

- name: Print ptfs status
  ansible.builtin.debug:
    var: ptfs_status

- name: Print ptfs info
  ansible.builtin.debug:
    var: ptfs_info
