---
# tasks file for check_ptf
- name: init varibles
  set_fact:
    ptfs: []
    ptfs_status: {}
    checked_ptf: {}
    ptfs_info: []
    not_loaded_ptfs_list: []
    loaded_ptfs_list: []
    to_be_loadednumber: []
    loaded: []
    compose_list: []
    temporarily_applied_list: []
    temporarily_applied: []

- name: compose ptf list and ptfs status dict
  set_fact:
    ptfs: "{{ ptfs|default([]) + [check_ptf_list_var.ptf_id] }}"
    ptfs_status: "{{ ptfs_status|default({}) | combine( {check_ptf_list_var.ptf_id: 'NON-EXISTENT'} ) }}"
  loop: '{{ check_ptf_list }}'
  loop_control:
    loop_var: check_ptf_list_var

- name: print check_ptf_list
  debug:
    var: check_ptf_list

- name: print ptf number list to-be-checked
  debug:
    msg: 'ptf numbers to be checked: {{ ptfs }}'

- name: query the status of the request ptf
  ibm.power_ibmi.ibmi_fix:
    fix_list: '{{ ptfs }}'
    operation: 'query'
  register: check

- name: compose check result dict
  set_fact:
    ptfs_info: "{{ check.ptf_list }}"

# - name: print ptfs_info
#   debug:
#     var: ptfs_info

- name: compose ptfs status dict
  set_fact:
    checked_ptf: "{{ checked_ptf|default({}) | combine( {ptfs_info_var.PTF_IDENTIFIER: ptfs_info_var.PTF_LOADED_STATUS} ) }}"
  loop: '{{ ptfs_info | list }}'
  loop_control:
    loop_var: ptfs_info_var

# - name: print checked_ptf
#   debug:
#     var: checked_ptf

- name: combine the query result and unknown ptf
  set_fact:
    ptfs_status: "{{ ptfs_status|default({}) | combine( checked_ptf|default({}) ) }}"

- name: compose to_be_loadednumber
  set_fact:
    to_be_loadednumber: "{{ to_be_loadednumber|default([]) + [ptf_status.key] }}"
  when: ptf_status.value == 'NON-EXISTENT' or ptf_status.value == 'PERMANENTLY REMOVED' or ptf_status.value == 'NOT LOADED'
  with_dict: "{{ ptfs_status }}"
  loop_control:
    loop_var: ptf_status

- name: compose temporarily_applied
  set_fact:
    temporarily_applied: "{{ temporarily_applied|default([]) + [ptf_status.key] }}"
  when: ptf_status.value == 'APPLIED'
  with_dict: "{{ ptfs_status }}"
  loop_control:
    loop_var: ptf_status

- name: compose loaded
  set_fact:
    loaded: "{{ loaded|default([]) + [ptf_status.key] }}"
  when: ptf_status.value == 'LOADED'
  with_dict: "{{ ptfs_status }}"
  loop_control:
    loop_var: ptf_status

# - debug:
#     var: loaded

# - name: print to_be_loadednumber
#   debug:
#     var: to_be_loadednumber

- name: compose compose_list
  set_fact:
    compose_list: []

- name: compose to_be_loaded
  include_tasks: find_ptfinfo.yml
  with_list: "{{ to_be_loadednumber }}"
  loop_control:
    loop_var: ptf_id

- name: set to_be_loaded
  set_fact:
    to_be_loaded: "{{ compose_list }}"

# - debug:
#     var: to_be_loaded

- name: call ibm.power_ibmi.ibmi_fix_product_check to filter uninstalled product
  ibm.power_ibmi.ibmi_fix_product_check:
    ptfs: '{{ to_be_loaded }}'
  register: fix_product_check_result
  when: to_be_loaded != [] and check_product

- name: compose not_loaded_ptfs_list and product_not_installed_ptfs
  set_fact:
    not_loaded_ptfs_list: "{{ fix_product_check_result.ptfs_with_product_installed | default([]) }}"
    product_not_installed_ptfs: "{{ fix_product_check_result.ptfs_without_product_installed | default([]) }}"

- name: compose compose_list
  set_fact:
    compose_list: []

- name: compose loaded_ptfs_list
  include_tasks: find_ptfinfo.yml
  with_list: "{{ loaded }}"
  loop_control:
    loop_var: ptf_id

- name: compose loaded_ptfs_list
  set_fact:
    loaded_ptfs_list: "{{ compose_list }}"
  when: loaded != []

- name: compose temporarily_applied_list
  include_tasks: find_ptfinfo.yml
  with_list: "{{ temporarily_applied }}"
  loop_control:
    loop_var: ptf_id

- name: compose temporarily_applied_list
  set_fact:
    temporarily_applied_list: "{{ compose_list }}"
  when: temporarily_applied != []

- name: compose ptfs_status
  set_fact:
    ptfs_status: "{{ ptfs_status | default({}) | combine({ ptf_status.ptf_id: 'PRODUCT_NOT_INSTALLED' }) }}"
  with_list: "{{ product_not_installed_ptfs }}"
  loop_control:
    loop_var: ptf_status
  when: product_not_installed_ptfs != []

- name: compose ptfs_info
  set_fact:
    ptfs_info: "{{ ptfs_info + [{'PTF_IDENTIFIER': ptf_status.key, 'PTF_LOADED_STATUS': ptf_status.value}] }}"
  when: ptf_status.value == 'NON-EXISTENT' or ptf_status.value == 'PRODUCT_NOT_INSTALLED'
  with_dict: "{{ ptfs_status }}"
  loop_control:
    loop_var: ptf_status

- name: print not loaded ptfs list
  debug:
    var: not_loaded_ptfs_list

- name: print product_not_installed_ptfs
  debug:
    var: product_not_installed_ptfs

- name: print already loaded ptfs list
  debug:
    var: loaded_ptfs_list

- name: print Temporarily applied ptfs list
  debug:
    var: temporarily_applied_list

- name: print ptfs status
  debug:
    var: ptfs_status

- name: print ptfs info
  debug:
    var: ptfs_info
    