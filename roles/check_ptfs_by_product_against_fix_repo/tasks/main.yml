---
# Tasks file for check_ptfs_by_product
- name: Fail the playbook if repo_server is invalid
  ansible.builtin.fail:
    msg: "repository server is not provided, please provide the repository server."
  when: not repo_server or repo_server is undefined

- name: Fail the playbook if product is invalid
  ansible.builtin.fail:
    msg: "product is not provided, please provide the product id."
  when: not product or product is undefined

- name: Initialize ptf_status
  ansible.builtin.set_fact:
    ptf_status: []

- name: Query system release
  ibm.power_ibmi.ibmi_sql_query:
    sql: "SELECT OS_VERSION, OS_RELEASE FROM SYSIBMADM.ENV_SYS_INFO"
  register: result

- name: Compose parameter release
  ansible.builtin.set_fact:
    release: "{{ 'V' + result['row'][0]['OS_VERSION'] + 'R' + result['row'][0]['OS_RELEASE'] + 'M0' }}"

- name: Retrieve the PTF list by product from repository server
  ibm.power_ibmi.ibmi_fix_repo:
    action: "find"
    type: "single_ptf"
    parameters:
      - {'product': '{{ product }}', 'release': '{{ release }}'}
  delegate_to: "{{ repo_server }}"
  register: product_info

- name: Got record failed from repository server
  ansible.builtin.set_fact:
    ptf_status: "{{ ptf_status | default([]) + [{ 'PRODUCT': prod.product, 'PRODUCT_STATUS': 'Record not found in repository DB' }] }}"
  when: product_info.get('fail_list')
  with_list: "{{ product_info.fail_list }}"
  loop_control:
    loop_var: prod

- name: Compare the ptfs on target system
  ansible.builtin.include_tasks: compare_ptf.yml
  when: product_info.get('success_list')
