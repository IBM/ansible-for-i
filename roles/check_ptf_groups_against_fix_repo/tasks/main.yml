---
# Tasks file for check_ptf_groups
- name: Fail the playbook if repo_server is invalid
  ansible.builtin.fail:
    msg: "Repository server is not provided, please provide the repository server."
  when: not repo_server or repo_server is undefined

- name: Fail the playbook if group_list is invalid
  ansible.builtin.fail:
    msg: "group_list is not provided, please provide the group list."
  when: group_list == [] or group_list is undefined

- name: Fail the playbook if type is invalid
  ansible.builtin.fail:
    msg: "Invalid input of type '{{ type }}'. Available options for type: 'current' and 'latest'."
  when: type != 'current' and type != 'latest'

- name: Initialize the variables
  ansible.builtin.set_fact:
    group_status: []
    group_on_system: []
    groups_installed: []
    groups_not_installed: []
    check_group_list: []

- name: Compare latest ptf group level against repository server
  when: type == "latest"
  block:
    - name: Compose fix repo parameters
      ansible.builtin.set_fact:
        check_group_list: "{{ check_group_list | default([]) + [ {'ptf_group_number': group, 'additional_param':'ORDER BY ptf_group_level DESC LIMIT 1'} ] }}"
      with_list: "{{ group_list }}"
      loop_control:
        loop_var: group

    - name: Retrieve latest group information from repository server
      ibm.power_ibmi.ibmi_fix_repo:
        action: "find"
        type: "ptf_group"
        parameters: "{{ check_group_list }}"
      delegate_to: "{{ repo_server }}"
      register: group_info

    - name: Got record failed from repository server
      ansible.builtin.set_fact:
        group_status: "{{ group_status | default([])\
                       + [{ 'PTF_GROUP_NUMBER': group.ptf_group_number, 'PTF_GROUP_STATUS': 'Record not found in repository DB'}] }}"
      when: group_info.get('fail_list')
      with_list: "{{ group_info.fail_list }}"
      loop_control:
        loop_var: group

    - name: Compare the group on target system
      ansible.builtin.include_tasks: compare_latest_group.yml
      with_list: "{{ group_info.success_list }}"
      loop_control:
        loop_var: group
      when: group_info.get('success_list')

- name: Compare current ptf group level against repository server
  when: type == "current"
  block:
    - name: Initialize group list for sql command
      ansible.builtin.set_fact:
        group_list_str: "{{ \"','\".join(group_list) }}"

    - name: Retrieve group information from target system
      ibm.power_ibmi.ibmi_sql_query:
        sql: "SELECT PTF_GROUP_NAME, PTF_GROUP_DESCRIPTION, PTF_GROUP_LEVEL, PTF_GROUP_STATUS\
              FROM QSYS2.GROUP_PTF_INFO
        WHERE PTF_GROUP_LEVEL IN (SELECT MAX(PTF_GROUP_LEVEL)\
        FROM QSYS2.GROUP_PTF_INFO WHERE PTF_GROUP_NAME IN ('{{ group_list_str }}') GROUP BY PTF_GROUP_NAME)"
      register: result

    - name: Compose the group name list
      ansible.builtin.set_fact:
        group_on_system: "{{ group_on_system | default([]) + [group.PTF_GROUP_NAME.strip()] }}"
      with_list: "{{ result.row }}"
      loop_control:
        loop_var: group

    - name: PTF group does not exist
      ansible.builtin.set_fact:
        group_status: "{{ group_status | default([]) + [{ 'PTF_GROUP_NUMBER': group, 'PTF_GROUP_STATUS': 'NON-EXISTENT' }] }}"
      when: group not in group_on_system
      with_list: "{{ group_list }}"
      loop_control:
        loop_var: group

    - name: Compose the groups list which are already installed
      ansible.builtin.set_fact:
        group_status: "{{ group_status | default([]) + [{ 'PTF_GROUP_NUMBER': group.PTF_GROUP_NAME,
        'CURRENT_PTF_GROUP_LEVEL': group.PTF_GROUP_LEVEL, 'PTF_GROUP_STATUS': group.PTF_GROUP_STATUS }] }}"
      when: group.PTF_GROUP_STATUS.strip() == "INSTALLED"
      with_list: "{{ result.row }}"
      loop_control:
        loop_var: group

    - name: Debug group_status
      ansible.builtin.debug:
        var: group_status

    - name: Compose group check list of 'NOT INSTALLED' for compare
      ansible.builtin.set_fact:
        check_group_list: "{{ check_group_list | default([]) + [{ 'ptf_group_number': group.PTF_GROUP_NAME.strip(),
        'ptf_group_level': group.PTF_GROUP_LEVEL, 'additional_param':'ORDER BY release_date DESC LIMIT 1'}] }}"
      when: group.PTF_GROUP_STATUS.strip() == "NOT INSTALLED"
      with_list: "{{ result.row }}"
      loop_control:
        loop_var: group

    - name: Retrieve group's ptf list from repository server
      ibm.power_ibmi.ibmi_fix_repo:
        action: "find"
        type: "ptf_group"
        parameters: "{{ check_group_list }}"
      delegate_to: "{{ repo_server }}"
      register: group_info

    - name: Got record failed from repository server
      ansible.builtin.set_fact:
        group_status: "{{ group_status | default([]) + [{ 'PTF_GROUP_NUMBER': group.ptf_group_number, 'CURRENT_PTF_GROUP_LEVEL': group.ptf_group_level,
        'PTF_GROUP_STATUS': 'Record not found in repository DB' }] }}"
      when: group_info.get('fail_list')
      with_list: "{{ group_info.fail_list }}"
      loop_control:
        loop_var: group

    - name: Compare the group on target system
      ansible.builtin.include_tasks: compare_current_group.yml
      with_list: "{{ group_info.success_list }}"
      loop_control:
        loop_var: group
      when:
        - group_info.get('success_list')
        - group_info.success_list | length > 0
